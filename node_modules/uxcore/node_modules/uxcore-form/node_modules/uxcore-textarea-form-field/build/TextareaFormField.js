'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * TextareaFormField Component for uxcore
 * @author eternalsky
 *
 * Copyright 2015-2016, Uxcore Team, Alinw.
 * All rights reserved.
 */

var FormField = require('uxcore-form-field');
var Constants = require("uxcore-const");
var assign = require('object-assign');
var autosize = require('autosize');
var React = require('react');

var TextAreaFormField = function (_FormField) {
    _inherits(TextAreaFormField, _FormField);

    function TextAreaFormField(props) {
        _classCallCheck(this, TextAreaFormField);

        return _possibleConstructorReturn(this, _FormField.call(this, props));
    }

    TextAreaFormField.prototype.componentDidMount = function componentDidMount() {
        var me = this;
        if (!me.props.standalone) {
            me.props.attachFormField(me);
            me.props.handleDataChange(me, {
                value: me.props.value,
                pass: true
            }, true);
        }
        me.props.autosize && autosize(me.refs.root);
    };

    TextAreaFormField.prototype.componentWillUnmount = function componentWillUnmount() {
        var me = this;
        if (!me.props.standalone) {
            this.props.detachFormField(this);
        }
        me.props.autosize && autosize.destroy(me.refs.root);
    };

    TextAreaFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        var me = this;
        var mode = me.props.jsxmode || me.props.mode;
        var prevMode = prevProps.jsxmode || prevProps.mode;
        if (me.props.autosize) {
            if (prevProps.value !== me.props.value) {
                autosize.update(me.refs.root);
            }
            if (prevMode == Constants.MODE.VIEW && mode == Constants.MODE.EDIT) {
                autosize(me.refs.root);
            } else if (prevMode == Constants.MODE.EDIT && mode == Constants.MODE.MODE) {
                autosize.destroy(me.refs.root);
            }
        }
    };

    TextAreaFormField.prototype.handleChange = function handleChange(e) {
        var me = this;
        var autoTrim = me.props.autoTrim;

        var value = e.currentTarget.value;
        if (autoTrim) {
            value = me.trim(value);
        }
        me.handleDataChange(value);
    };

    TextAreaFormField.prototype.trim = function trim(str) {
        return str.replace(/(^\s+|\s+$)/g, "");
    };

    TextAreaFormField.prototype.addSpecificClass = function addSpecificClass() {
        var me = this;
        if (me.props.jsxprefixCls == "kuma-uxform-field") {
            return me.props.jsxprefixCls + " kuma-textarea-uxform-field";
        } else {
            return me.props.jsxprefixCls;
        }
    };

    TextAreaFormField.prototype.handleFocus = function handleFocus(e) {
        this.props.onFocus(e);
    };

    TextAreaFormField.prototype.handleBlur = function handleBlur(e) {
        var me = this;
        var pass = true;
        if (me.props.validateOnBlur) {
            pass = me.doValidate();
        }
        me.props.onBlur(e, pass);
    };

    TextAreaFormField.prototype.handleKeyDown = function handleKeyDown(e) {
        var me = this;
        me.props.onKeyDown(e);
    };

    TextAreaFormField.prototype.renderField = function renderField() {
        var me = this;
        var mode = me.props.jsxmode || me.props.mode;
        if (mode == Constants.MODE.EDIT) {
            return React.createElement('textarea', {
                disabled: me.props.jsxdisabled,
                placeholder: me.props.jsxplaceholder,
                className: 'kuma-textarea',
                ref: 'root',
                value: me.state.value || "",
                onChange: me.handleChange.bind(me),
                onFocus: me.handleFocus.bind(me),
                onBlur: me.handleBlur.bind(me),
                onKeyDown: me.handleKeyDown.bind(me) });
        } else if (mode == Constants.MODE.VIEW) {
            return React.createElement(
                'span',
                { style: {
                        'white-space': 'pre-wrap'
                    }, className: 'view-mode' },
                me.state.value
            );
        }
    };

    return TextAreaFormField;
}(FormField);

TextAreaFormField.displayName = "TextAreaFormField";

TextAreaFormField.propTypes = assign({}, FormField.propTypes, {
    onBlur: React.PropTypes.func,
    onFocus: React.PropTypes.func,
    onKeyDown: React.PropTypes.func,
    validateOnBlur: React.PropTypes.bool,
    autoTrim: React.PropTypes.bool,
    autosize: React.PropTypes.bool
});

TextAreaFormField.defaultProps = assign({}, FormField.defaultProps, {
    onBlur: function onBlur() {},
    onFocus: function onFocus() {},
    onKeyDown: function onKeyDown() {},
    validateOnBlur: false,
    autosize: true
});

module.exports = TextAreaFormField;