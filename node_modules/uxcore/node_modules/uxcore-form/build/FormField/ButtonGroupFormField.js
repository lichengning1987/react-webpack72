'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var React = require('react');
var ReactDOM = require('react-dom');
var classnames = require('classnames');
var assign = require("object-assign");

var ButtonGroupFormField = function (_React$Component) {
    _inherits(ButtonGroupFormField, _React$Component);

    function ButtonGroupFormField(props) {
        _classCallCheck(this, ButtonGroupFormField);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    ButtonGroupFormField.prototype._processChild = function _processChild() {
        var me = this;
        var containsChildren = React.Children.count(me.props.children) > 0;
        if (!containsChildren) {
            return false;
        }

        //使用forEach,剔除不合法的child,比如null或undefined
        var elements = [];

        React.Children.forEach(me.props.children, function (child, index) {
            if (React.isValidElement(child)) {
                var props = { key: index };

                if (child.props.action == "submit") {

                    //警告断言, 在uxcore-form外直接使用时,不能正常工作,这里给出警告信息
                    if (!me.props.getValues || typeof me.props.getValues !== 'function') {
                        console.warn("getValues method missing, the submit button will works incorrectly");
                    }

                    props.onClick = function () {
                        var data = me.props.getValues();
                        child.props.onClick(data);
                    };
                }
                if (child.props.action == "reset") {

                    //警告断言, 在uxcore-form外直接使用时,不能正常工作,这里给出警告信息
                    if (!me.props.resetValues || typeof me.props.resetValues !== 'function') {
                        console.warn('resetValues method missing, the reset button will works incorrectly');
                    }

                    props.onClick = function () {
                        me.props.resetValues();
                    };
                }

                elements.push(React.cloneElement(child, props));
            }
        });

        return elements;
    };

    ButtonGroupFormField.prototype.render = function render() {
        var _classnames;

        var me = this;
        var elements = me._processChild();
        return React.createElement(
            'div',
            { className: classnames((_classnames = {}, _defineProperty(_classnames, me.props.jsxprefixCls, true), _defineProperty(_classnames, me.props.className, !!me.props.className), _classnames)), style: assign({}, me.props.style, {
                    display: me.props.jsxshow ? "table" : "none"
                }) },
            !!elements && elements
        );
    };

    return ButtonGroupFormField;
}(React.Component);

ButtonGroupFormField.propTypes = {
    jsxprefixCls: React.PropTypes.string,
    jsxflex: React.PropTypes.number,
    jsxshow: React.PropTypes.bool
};
ButtonGroupFormField.defaultProps = {
    jsxprefixCls: "kuma-uxform-field kuma-button-group-uxform-field", // 默认类名
    jsxflex: 1, // 占 Form 的比例，类似于 css3 中的 flex-box
    jsxshow: true
};
ButtonGroupFormField.displayName = "ButtonGroupFormField";

module.exports = ButtonGroupFormField;