"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* @author: eternalsky
* @time:   10/26 2015
*/

var Left = require("./Left");
var Right = require("./Right");
var classnames = require("classnames");
var React = require('react');
var ReactDOM = require('react-dom');

var Layout = function (_React$Component) {
    _inherits(Layout, _React$Component);

    function Layout(props) {
        _classCallCheck(this, Layout);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Layout).call(this, props));

        _this.state = {};
        return _this;
    }

    _createClass(Layout, [{
        key: "processChildren",
        value: function processChildren() {
            var me = this;
            var children = me.props.children;
            var leftAdaptive = false;
            var rightAdaptive = false;
            React.Children.map(children, function (child) {
                if (child && typeof child.type == 'function' && child.type.displayName == 'Left') {
                    me.left = child;
                    leftAdaptive = !!child.props.adaptive;
                } else if (child && typeof child.type == 'function' && child.type.displayName == 'Right') {
                    me.right = child;
                    rightAdaptive = !!child.props.adaptive;
                }
            });

            me.suffix = me.getSuffix(leftAdaptive, rightAdaptive);
            if (me.suffix == 'rf') {
                me.rightStyle = {
                    marginLeft: -me.right.props.width
                };
                me.leftStyle = {
                    paddingRight: me.right.props.width
                };
            } else if (me.suffix == 'lf') {
                me.rightStyle = {
                    paddingLeft: me.left.props.width
                };
                me.leftStyle = {
                    marginRight: -me.left.props.width
                };
            }
            return me.generateClass(me.suffix);
        }
    }, {
        key: "getSuffix",
        value: function getSuffix(leftAdaptive, rightAdaptive) {
            var suffix = '';
            // 如果都是非自适应，则为 fixed
            if (!leftAdaptive && !rightAdaptive) {
                suffix = 'fixed';
            }
            // 左侧定宽，右侧自适应，lf
            else if (!leftAdaptive && rightAdaptive) {
                    suffix = 'lf';
                }
                // 左侧自适应，右侧定宽，rf
                else if (leftAdaptive && !rightAdaptive) {
                        suffix = 'rf';
                    } else {
                        console.error("left and right cannot be both adaptive, layout generation failed");
                    }
            return suffix;
        }
    }, {
        key: "generateClass",
        value: function generateClass(suffix) {
            var me = this;
            var length = React.Children.count(me.props.children);
            var layoutCls = '';
            var leftCls = '';
            var rightCls = '';

            if (length == 2) {
                layoutCls = 'kuma-layout-2c';
            } else if (lengthCls == 3) {
                layoutCls = 'kuma-layout-3c';
            } else {
                console.error("children length should be 2 or 3, layout generation failed");
            }

            leftCls = layoutCls + '-left-' + suffix;
            rightCls = layoutCls + '-right-' + suffix;
            return {
                layoutCls: layoutCls,
                leftCls: leftCls,
                rightCls: rightCls
            };
        }
    }, {
        key: "renderLeft",
        value: function renderLeft(cls) {
            var me = this;
            if (!!me.left) {
                var _classnames;

                return React.cloneElement(me.left, {
                    className: classnames((_classnames = {}, _defineProperty(_classnames, me.left.props.className, !!me.left.props.className), _defineProperty(_classnames, cls.leftCls, true), _classnames)),
                    style: me.leftStyle || {},
                    key: 'left'
                });
            }
        }
    }, {
        key: "renderRight",
        value: function renderRight(cls) {
            var me = this;
            if (!!me.right) {
                var _classnames2;

                return React.cloneElement(me.right, {
                    className: classnames((_classnames2 = {}, _defineProperty(_classnames2, me.right.props.className, !!me.right.props.className), _defineProperty(_classnames2, cls.rightCls, true), _classnames2)),
                    style: me.rightStyle || {},
                    key: 'right'
                });
            }
        }
    }, {
        key: "renderLayout",
        value: function renderLayout(cls) {
            var me = this;
            var arr = [];
            if (me.suffix == 'lf') {
                arr.push(me.renderRight(cls));
                arr.push(me.renderLeft(cls));
            } else {
                arr.push(me.renderLeft(cls));
                arr.push(me.renderRight(cls));
            }
            return arr;
        }
    }, {
        key: "render",
        value: function render() {
            var _classnames3;

            var me = this;
            var cls = me.processChildren();
            return React.createElement(
                "div",
                { className: classnames((_classnames3 = {}, _defineProperty(_classnames3, me.props.className, !!me.props.className), _defineProperty(_classnames3, cls.layoutCls, true), _defineProperty(_classnames3, "fn-clear", true), _classnames3)) },
                me.renderLayout(cls)
            );
        }
    }]);

    return Layout;
}(React.Component);

Layout.Left = Left;
Layout.Right = Right;
Layout.displayName = "Layout";
Layout.defaultProps = {};
Layout.propTypes = {};
module.exports = Layout;