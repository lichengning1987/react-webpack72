'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * MultiSelect Component for uxcore
 * @author peijie.dpj
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var React = require('react');
var ReactDOM = require('react-dom');
var Dropdown = require('uxcore-dropdown');
var CheckboxGroup = require('uxcore-checkbox-group');
var Button = require('uxcore-button');
var assign = require('object-assign');
var classnames = require('classnames');

var MultiSelect = function (_React$Component) {
  _inherits(MultiSelect, _React$Component);

  function MultiSelect(props) {
    _classCallCheck(this, MultiSelect);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      visible: false
    };

    _this.lastValue = _this.props.value || [];
    return _this;
  }

  MultiSelect.prototype.handleChange = function handleChange(value) {
    var me = this,
        props = this.props;

    var newValue = [];
    if (props.maxSelect && value.length > props.maxSelect) {
      newValue = me.lastValue;
    } else {
      newValue = value;
      me.lastValue = value;
    }

    props.onChange(newValue);
  };

  MultiSelect.prototype.handleSelectAll = function handleSelectAll() {
    var me = this,
        props = this.props;

    var valueList = [];
    if (props.disabled) {
      return;
    } else {
      React.Children.map(props.children, function (item) {
        if (!item.props.disabled || me._hasSelected.call(me, item.props.value)) {
          valueList.push(item.props.value);
        }
      });
    }

    props.onChange(valueList);
  };

  MultiSelect.prototype.handleClear = function handleClear() {
    var me = this,
        props = this.props;

    var valueList = [];

    if (props.disabled) {
      return;
    } else {
      React.Children.map(props.children, function (item) {
        if (item.props.disabled && me._hasSelected.call(me, item.props.value)) {
          valueList.push(item.props.value);
        }
      });
    }

    props.onChange(valueList);
  };

  MultiSelect.prototype.handleSubmit = function handleSubmit() {
    var me = this,
        props = this.props;

    var labelList = [],
        valueList = [];

    React.Children.map(props.children, function (item) {
      if (me._hasSelected.call(me, item.props.value)) {
        labelList.push(item.props[props.optionLabelProp]);
        valueList.push(item.props.value);
      }
    });

    props.onSubmit(valueList, labelList);

    me.setState({
      visible: false
    });
  };

  MultiSelect.prototype._processLabel = function _processLabel(type) {
    var me = this,
        props = this.props;

    var res = [];
    res = React.Children.map(props.children, function (item) {
      if (me._hasSelected.call(me, item.props.value)) {
        switch (type) {
          case 'content':
            return React.createElement(
              'span',
              { className: props.prefixCls + '-selection__choice__content' },
              item.props[props.optionLabelProp],
              React.createElement(
                'span',
                { className: props.prefixCls + '-selection__choice__break' },
                props.titleBreakStr
              )
            );
            break;

          case 'title':
            return item.props[props.optionLabelProp] + props.titleBreakStr;
            break;
        }
      }
    });

    if (res.length == 0) {
      switch (type) {
        case 'content':
          res = React.createElement(
            'span',
            { className: props.prefixCls + '-selection__placeholder' },
            props.placeholder
          );
          break;

        case 'title':
          res = [props.placeholder];
          break;
      }
    } else {
      if (type == 'title') {
        var len = res.length;
        res[len - 1] = res[len - 1].slice(0, res[len - 1].length - 1);
      }
    }

    return type == 'title' ? res.join('') : res;
  };

  MultiSelect.prototype._hasSelected = function _hasSelected(value) {
    var me = this;

    return me.props.value.indexOf(value) != -1;
  };

  MultiSelect.prototype._handleVisbleChange = function _handleVisbleChange(visible) {
    var props = this.props;

    if (props.disabled) {
      return;
    }
    this.setState({
      visible: visible
    });
  };

  MultiSelect.prototype.render = function render() {
    var _classnames, _classnames2, _classnames3, _classnames4;

    var me = this,
        props = this.props;

    // 检查是否可以点击 全选
    var canSelectItemNumbers = 0;

    React.Children.map(props.children, function (item, index) {
      !item.props.disabled && canSelectItemNumbers++;
    });

    var menu = React.createElement(
      'div',
      { className: props.prefixCls + '-dropdown-border' },
      React.createElement(
        'div',
        { className: props.prefixCls + '-content' },
        React.createElement(
          CheckboxGroup,
          { onChange: me.handleChange.bind(me),
            value: props.value },
          React.Children.map(props.children, function (item, index) {
            return React.createElement(CheckboxGroup.Item, _extends({}, item.props, { key: index, jsxdisabled: props.disabled }));
          })
        )
      ),
      React.createElement(
        'div',
        { className: props.prefixCls + '-footer' },
        !!props.maxSelect && React.createElement(
          'p',
          null,
          '最多选',
          props.maxSelect,
          '个'
        ),
        React.createElement(
          Button,
          { className: classnames((_classnames = {}, _defineProperty(_classnames, props.prefixCls + '-button', true), _defineProperty(_classnames, props.prefixCls + '-button-hidden', !props.showSelectAll), _classnames)),
            size: 'small',
            disabled: props.maxSelect && props.maxSelect < canSelectItemNumbers ? true : false,
            onClick: me.handleSelectAll.bind(me) },
          '全选'
        ),
        React.createElement(
          Button,
          { className: classnames((_classnames2 = {}, _defineProperty(_classnames2, props.prefixCls + '-button', true), _defineProperty(_classnames2, props.prefixCls + '-button-hidden', !props.showClear), _classnames2)),
            size: 'small',
            onClick: me.handleClear.bind(me) },
          '清空'
        )
      )
    );

    return React.createElement(
      'div',
      null,
      React.createElement(
        Dropdown,
        { overlay: menu,
          minOverlayWidthMatchTrigger: false,
          visible: me.state.visible,
          onVisibleChange: me._handleVisbleChange.bind(me),
          trigger: ["click"],
          overlayClassName: classnames((_classnames3 = {}, _defineProperty(_classnames3, props.prefixCls + '-dropdown', true), _defineProperty(_classnames3, props.dropdownClassName, !!props.dropdownClassName), _classnames3)) },
        React.createElement(
          'span',
          { className: classnames((_classnames4 = {}, _defineProperty(_classnames4, props.prefixCls, true), _defineProperty(_classnames4, props.className, !!props.className), _defineProperty(_classnames4, props.prefixCls + '-open', me.state.visible), _defineProperty(_classnames4, props.prefixCls + '-disabled', props.disabled), _classnames4)) },
          React.createElement(
            'span',
            { className: props.prefixCls + '-selection ' + props.prefixCls + '-selection--multiple' },
            React.createElement(
              'span',
              { className: props.prefixCls + '-selection--multiple--content', title: me._processLabel('title') },
              me._processLabel('content')
            ),
            React.createElement('span', { className: props.prefixCls + '-arrow' })
          )
        )
      )
    );
  };

  return MultiSelect;
}(React.Component);

MultiSelect.defaultProps = {
  prefixCls: 'kuma-multi-select',
  className: '',
  dropdownClassName: '',
  value: [],
  disabled: false,
  placeholder: '',
  titleBreakStr: "、",
  optionLabelProp: "text",
  showSelectAll: true,
  showClear: true,
  onChange: function onChange() {},
  onSubmit: function onSubmit() {}
};

MultiSelect.propTypes = {
  prefixCls: React.PropTypes.string,
  className: React.PropTypes.string,
  dropdownClassName: React.PropTypes.string,
  value: React.PropTypes.array,
  disabled: React.PropTypes.bool,
  maxSelect: React.PropTypes.number,
  placeholder: React.PropTypes.string,
  titleBreakStr: React.PropTypes.string,
  optionLabelProp: React.PropTypes.string,
  showSelectAll: React.PropTypes.bool,
  showClear: React.PropTypes.bool,
  onChange: React.PropTypes.func,
  onSubmit: React.PropTypes.func
};

// http://facebook.github.io/react/docs/reusable-components.html

MultiSelect.Item = CheckboxGroup.Item;

MultiSelect.displayName = "MultiSelect";

module.exports = MultiSelect;