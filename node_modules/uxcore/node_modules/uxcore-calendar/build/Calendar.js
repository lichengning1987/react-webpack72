'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var RcCalendar = require('./RcCalendar');
var GregorianCalendar = require('gregorian-calendar');
var DateTimeFormat = require('gregorian-calendar-format');
var Datepicker = require('rc-calendar/lib/Picker');
var RcMonthCalendar = require('rc-calendar/lib/MonthCalendar');
var RcYearCalendar = require('./YearCalendar');
var TimePicker = require('rc-time-picker/lib/module/Panel');
var util = require('./util');
var React = require('react');

var defaultValueLocale = {};
var CalendarLocale = {};
var TimePickerLocale = {};
defaultValueLocale['zh-cn'] = require('gregorian-calendar/lib/locale/zh_CN');
defaultValueLocale['en-us'] = require('gregorian-calendar/lib/locale/en_US');
CalendarLocale['zh-cn'] = require('rc-calendar/lib/locale/zh_CN');
CalendarLocale['en-us'] = require('rc-calendar/lib/locale/en_US');
TimePickerLocale['zh-cn'] = require('rc-time-picker/lib/locale/zh_CN');
TimePickerLocale['en-us'] = require('rc-time-picker/lib/locale/en_US');

function getGregorianCalendarDate(date, locale) {
    defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
    var value = new GregorianCalendar(defaultValueLocale[locale]);
    value.setTime(new Date(date).valueOf());
    return value;
}

function getCalendarContainer() {
    var c = document.createElement('div');
    c.className = 'uxcore';
    document.body.appendChild(c);
    return c;
}

var Calendar = function (_React$Component) {
    _inherits(Calendar, _React$Component);

    function Calendar(props) {
        _classCallCheck(this, Calendar);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {};
        return _this;
    }

    Calendar.prototype.componentWillMount = function componentWillMount() {
        var me = this;
        me.TimePickerElement = React.createElement(TimePicker, { prefixCls: 'kuma-time-picker-panel', locale: TimePickerLocale[me.props.locale] });
    };

    Calendar.prototype.render = function render() {
        var _this2 = this;

        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            contentRender: p.contentRender,
            disabledDate: p.disabledDate,
            showWeekNumber: p.showWeekNumber,
            showToday: p.showToday,
            timePicker: p.timePicker ? p.timePicker : p.showTime ? me.TimePickerElement : null,
            showDateInput: p.showDateInput,
            locale: CalendarLocale[p.locale],
            formatter: formatter,
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            formatter: formatter,
            align: p.align,
            transitionName: p.transitionName,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            placement: 'bottomLeft',
            getCalendarContainer: p.getPopupContainer || getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.defaultValue = value;
        } else {
            pickerOptions.value = calendarOptions.defaultValue = null;
        }

        if (p.defaultValue) {
            var _value = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = _value;
            pickerOptions.defaultValue = _value;
        } else {
            var _value2 = getGregorianCalendarDate(new Date().getTime(), p.locale);
            calendarOptions.defaultValue = _value2;
        }
        if (p.hasTrigger) {
            pickerOptions.trigger = React.createElement('i', { className: 'kuma-icon kuma-icon-calender' });
        }

        var calendar = React.createElement(RcCalendar, calendarOptions);

        function _onChange(v) {
            if (v) {
                var date = v.getTime();
                var _value3 = getGregorianCalendarDate(date, p.locale);
                this.props.onSelect(new Date(date), formatter.format(_value3));
            } else {
                this.props.onSelect(v, v);
            }
        }

        var triggerStyle = {};
        if (p.inputWidth) {
            triggerStyle.width = p.inputWidth;
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            function (_ref) {
                var value = _ref.value;

                return React.createElement(
                    'span',
                    { className: 'kuma-calendar-picker-input', style: triggerStyle },
                    React.createElement('input', { value: value && formatter.format(value), readOnly: true, disabled: me.props.disabled, placeholder: _this2.props.placeholder, className: 'kuma-input' }),
                    p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender' }) : null
                );
            }
        );
    };

    return Calendar;
}(React.Component);

Calendar.displayName = 'Calendar';
Calendar.defaultProps = {
    format: 'yyyy-MM-dd',
    placeholder: '请选择日期',
    onSelect: function onSelect() {},
    locale: 'zh-cn',
    align: {
        offset: [0, 0]
    },
    showDateInput: true,
    hasTrigger: true,
    transitionName: 'slideUp'
};
Calendar.propTypes = {
    format: React.PropTypes.string,
    inputWidth: React.PropTypes.number,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string,
    hasTrigger: React.PropTypes.bool,
    getPopupContainer: React.PropTypes.func
};

var MonthCalendar = function (_React$Component2) {
    _inherits(MonthCalendar, _React$Component2);

    function MonthCalendar(props) {
        _classCallCheck(this, MonthCalendar);

        var _this3 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

        _this3.state = {};
        return _this3;
    }

    MonthCalendar.prototype.render = function render() {
        var _this4 = this;

        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            locale: CalendarLocale[p.locale],
            orient: ['top', 'left'],
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            align: p.align,
            transitionName: p.transitionName,
            formatter: formatter,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            getCalendarContainer: p.getPopupContainer || getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.defaultValue = value;
        } else {
            pickerOptions.value = calendarOptions.defaultValue = null;
        }

        if (p.defaultValue) {
            var _value4 = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = _value4;
        }
        var calendar = React.createElement(RcMonthCalendar, calendarOptions);

        function _onChange(v) {
            var date = v.getTime();
            var value = getGregorianCalendarDate(date, p.locale);
            this.props.onSelect(new Date(date), formatter.format(value));
        }

        var triggerStyle = {};
        if (p.inputWidth) {
            triggerStyle.width = p.inputWidth;
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            function (_ref2) {
                var value = _ref2.value;

                return React.createElement(
                    'span',
                    { className: 'kuma-calendar-picker-input', style: triggerStyle },
                    React.createElement('input', { value: value && formatter.format(value), readOnly: true, disabled: me.props.disabled, placeholder: _this4.props.placeholder, className: 'kuma-input' }),
                    p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender' }) : null
                );
            }
        );
    };

    return MonthCalendar;
}(React.Component);

MonthCalendar.displayName = 'MonthCalendar';
MonthCalendar.defaultProps = {
    format: 'yyyy-MM',
    placeholder: '请选择月份',
    onSelect: function onSelect() {},
    locale: 'zh-cn',
    transitionName: 'slideUp',
    align: {
        offset: [0, 0]
    },
    showDateInput: false,
    hasTrigger: true
};
MonthCalendar.propTypes = {
    format: React.PropTypes.string,
    inputWidth: React.PropTypes.number,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string,
    getPopupContainer: React.PropTypes.func
};

var YearCalendar = function (_React$Component3) {
    _inherits(YearCalendar, _React$Component3);

    function YearCalendar(props) {
        _classCallCheck(this, YearCalendar);

        var _this5 = _possibleConstructorReturn(this, _React$Component3.call(this, props));

        _this5.state = {};
        return _this5;
    }

    YearCalendar.prototype.render = function render() {
        var _this6 = this;

        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            locale: CalendarLocale[p.locale],
            orient: ['top', 'left'],
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            align: p.align,
            formatter: formatter,
            transitionName: p.transitionName,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            getCalendarContainer: p.getPopupContainer || getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.defaultValue = value;
        } else {
            pickerOptions.value = calendarOptions.defaultValue = null;
        }

        if (p.defaultValue) {
            var _value5 = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = _value5;
        }
        var calendar = React.createElement(RcYearCalendar, calendarOptions);

        function _onChange(v) {
            var date = v.getTime();
            var value = getGregorianCalendarDate(date, p.locale);
            this.props.onSelect(new Date(date), formatter.format(value));
        }

        var triggerStyle = {};
        if (p.inputWidth) {
            triggerStyle.width = p.inputWidth;
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            function (_ref3) {
                var value = _ref3.value;

                return React.createElement(
                    'span',
                    { className: 'kuma-calendar-picker-input', style: triggerStyle },
                    React.createElement('input', { value: value && formatter.format(value), readOnly: true, disabled: me.props.disabled, placeholder: _this6.props.placeholder, className: 'kuma-input' }),
                    p.hasTrigger ? React.createElement('i', { className: 'kuma-icon kuma-icon-calender' }) : null
                );
            }
        );
    };

    return YearCalendar;
}(React.Component);

YearCalendar.displayName = 'YearCalendar';
YearCalendar.defaultProps = {
    format: 'yyyy',
    placeholder: '请选择年份',
    onSelect: function onSelect() {},
    locale: 'zh-cn',
    transitionName: 'slideUp',
    align: {
        offset: [0, 0]
    },
    showDateInput: false,
    hasTrigger: true
};
YearCalendar.propTypes = {
    format: React.PropTypes.string,
    inputWidth: React.PropTypes.number,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string,
    getPopupContainer: React.PropTypes.func
};

Calendar.MonthCalendar = MonthCalendar;
Calendar.YearCalendar = YearCalendar;
Calendar.CalendarPanel = RcCalendar;
Calendar.util = util;

module.exports = Calendar;