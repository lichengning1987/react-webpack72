'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseEditor = require('./baseEditor');

var _baseEditor2 = _interopRequireDefault(_baseEditor);

var _util = require('../utils/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var MutationObserver = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver;

// webkit browsers support 'plaintext-only'
var contentEditableValue = function () {
  var div = document.createElement('div');
  div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
  return div.contentEditable === 'plaintext-only' ? 'plaintext-only' : true;
}();

var ContentEditableEditor = function (_BaseEditor) {
  _inherits(ContentEditableEditor, _BaseEditor);

  function ContentEditableEditor(props) {
    _classCallCheck(this, ContentEditableEditor);

    var _this = _possibleConstructorReturn(this, _BaseEditor.call(this, props));

    _this.state = {
      focus: false,
      value: props.defaultValue
    };
    return _this;
  }

  ContentEditableEditor.prototype.componentDidMount = function componentDidMount() {
    this.STORE = {};
    if (this.props.defaultValue) {
      this.refs.editor.innerHTML = this.props.defaultValue;
    }
    if (MutationObserver) {
      this.observer = new MutationObserver(this.onMutation.bind(this));
      this.observer.observe(this.refs.editor, {
        characterData: true,
        childList: true,
        subtree: true
      });
    }
  };

  ContentEditableEditor.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.observer) {
      this.observer.disconnect();
    }
  };

  ContentEditableEditor.prototype.handleEnterPress = function handleEnterPress(e) {
    e.preventDefault();
    var editor = this.refs.editor;
    var sel = rangy.getSelection();
    var range = sel.getRangeAt(0);

    // make sure the last element of the editor is br
    // refer to: http://stackoverflow.com/questions/6023307/dealing-with-line-breaks-on-contenteditable-div
    if (!editor.lastChild || editor.lastChild.nodeName.toLowerCase() !== 'br') {
      editor.appendChild(document.createElement('br'));
    }
    var nodeBr = document.createElement('br');
    range.deleteContents();
    range.insertNode(nodeBr);
    range.setStartAfter(nodeBr);
    sel.setSingleRange(range);
  };

  ContentEditableEditor.prototype.handleDefaultKeyup = function handleDefaultKeyup(e) {
    var delimiter = this.props.delimiter;

    var sel = rangy.getSelection();
    var range = sel.getRangeAt(0);
    if (range.commonAncestorContainer.nodeType === 3) {
      range.setStart(range.commonAncestorContainer, 0);
      var originStr = range.toString();
      var str = (0, _util.parseStrByDelimiter)(originStr, delimiter);
      // send str to matcher
      this.props.matcher(str);
      if (str) {
        // set range's start position before delimiter
        range.setStart(range.commonAncestorContainer, originStr.length - str.length - 1);
        var pos = range.getEndClientPos();
        // FIXME: ie8 will return error position in some case
        this.props.setCursorPos(pos);
        // save range position
        this.STORE.bookmark = range.getBookmark(range.commonAncestorContainer);
      }
    }
  };

  ContentEditableEditor.prototype.onInput = function onInput() {
    if (!this.observer) {
      this.emitChange();
    }
  };

  ContentEditableEditor.prototype.onMutation = function onMutation(mutations) {
    this.emitChange(mutations);
  };

  ContentEditableEditor.prototype.onBlur = function onBlur() {
    this.emitChange();
    this.setState({
      focus: false
    });
  };

  ContentEditableEditor.prototype.onFocus = function onFocus() {
    this.setState({
      focus: true
    });
    this.props.onFocus(this);
  };

  ContentEditableEditor.prototype.insert = function insert(mentionContent) {
    var editor = this.refs.editor;

    var sel = rangy.getSelection();
    if (this.STORE.bookmark) {
      var range = sel.getRangeAt(0);
      range.moveToBookmark(this.STORE.bookmark);
      var mentionNode = document.createElement('input');
      mentionNode.setAttribute('type', 'button');
      mentionNode.setAttribute('tabindex', '-1');
      mentionNode.className = this.props.prefixCls + '-node';
      mentionNode.value = mentionContent;
      // delete origin content in range
      range.deleteContents();
      range.insertNode(mentionNode);
      range.collapseAfter(mentionNode);
      range.select();
      setTimeout(function () {
        editor.focus();
      }, 0);
    }
  };

  ContentEditableEditor.prototype.extractContent = function extractContent() {
    // console.time('extractContent');
    var editor = this.refs.editor;
    var nodes = editor.childNodes;
    var content = '';
    for (var i = 0, len = nodes.length; i < len; i += 1) {
      var node = nodes[i];
      if (node.nodeType === 1) {
        var tagName = node.tagName.toLowerCase();
        if (tagName === 'input') {
          content += ' ' + node.value + ' ';
        } else if (tagName === 'br') {
          content += '\n';
        }
      } else if (node.nodeType === 3) {
        content += node.textContent || node.nodeValue;
      }
    }
    // console.timeEnd('extractContent');
    return content;
  };

  ContentEditableEditor.prototype.emitChange = function emitChange(e) {
    if (!this.observer) {
      var editor = this.refs.editor;

      var lastHtml = this.lastHtml;
      var currentHtml = editor.innerHTML;
      if (lastHtml === currentHtml) {
        // no change made
        return;
      }
      this.lastHtml = currentHtml;
    }
    var content = this.extractContent();
    this.setState({
      value: content
    });
    this.props.onChange(e, content);
  };

  ContentEditableEditor.prototype.render = function render() {
    var readOnly = this.props.readOnly;

    var style = {
      width: this.props.width,
      height: this.props.height
    };
    return _react2["default"].createElement(
      'div',
      { className: this.props.prefixCls },
      _react2["default"].createElement('div', { className: this.props.prefixCls + '-editor', ref: 'editor',
        onKeyUp: this.onKeyup.bind(this),
        onKeyDown: this.onKeydown.bind(this),
        contentEditable: readOnly ? false : contentEditableValue,
        onInput: this.onInput.bind(this),
        onBlur: this.onBlur.bind(this),
        onFocus: this.onFocus.bind(this),
        style: style }),
      !this.state.focus && !this.state.value ? _react2["default"].createElement(
        'div',
        { className: this.props.prefixCls + '-placeholder' },
        this.props.placeholder
      ) : ''
    );
  };

  return ContentEditableEditor;
}(_baseEditor2["default"]);

exports["default"] = ContentEditableEditor;

ContentEditableEditor.propType = {
  prefixCls: _react2["default"].PropTypes.string,
  width: _react2["default"].PropTypes.number,
  height: _react2["default"].PropTypes.number,
  placeholder: _react2["default"].PropTypes.string,
  mentionFormatter: _react2["default"].PropTypes.func,
  onChange: _react2["default"].PropTypes.func,
  onAdd: _react2["default"].PropTypes.func,
  defaultValue: _react2["default"].PropTypes.string,
  readOnly: _react2["default"].PropTypes.bool,
  delimiter: _react2["default"].PropTypes.string
};
ContentEditableEditor.defaultProps = {
  prefixCls: '',
  width: 200,
  height: 100,
  placeholder: '',
  mentionFormatter: function mentionFormatter(data) {
    return '@' + data.text;
  },
  onChange: function onChange() {},
  onAdd: function onAdd() {},
  defaultValue: '',
  readOnly: false,
  delimiter: '@'
};
module.exports = exports['default'];