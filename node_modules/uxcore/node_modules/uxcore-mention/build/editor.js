'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./rangy-position');

var _util = require('./util');

var _keycode = require('./keycode');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
// import rangy from 'rangy';


var STORE = {};

// webkit browsers support 'plaintext-only'
var contentEditableValue = function () {
  var div = document.createElement('div');
  div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
  return div.contentEditable === 'plaintext-only' ? 'plaintext-only' : true;
}();

var Editor = function (_React$Component) {
  _inherits(Editor, _React$Component);

  function Editor(props) {
    _classCallCheck(this, Editor);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      focus: false,
      value: props.value
    };
    return _this;
  }

  Editor.prototype.componentDidMount = function componentDidMount() {
    if (this.props.value) {
      this.refs.editor.innerHTML = this.props.value;
    }
  };

  Editor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.mentionTarget && (!this.props.mentionTarget || this.props.mentionTarget.t !== nextProps.mentionTarget.t)) {
      this.insertMentionTarget(nextProps.mentionTarget.data);
    }
  };

  Editor.prototype.onKeydown = function onKeydown(e) {
    switch (e.keyCode) {
      case _keycode.KEYCODE.UP:
      case _keycode.KEYCODE.DOWN:
        if (this.props.panelVisible) {
          e.preventDefault();
        }
        break;
      case _keycode.KEYCODE.ENTER:
        // insert br at the end of line
        e.preventDefault();
        if (!this.props.panelVisible) {
          var editor = this.refs.editor;
          var sel = rangy.getSelection();
          var range = sel.getRangeAt(0);

          // make sure the last element of the editor is br
          // refer to: http://stackoverflow.com/questions/6023307/dealing-with-line-breaks-on-contenteditable-div
          if (!editor.lastChild || editor.lastChild.nodeName.toLowerCase() !== 'br') {
            editor.appendChild(document.createElement('br'));
          }
          var nodeBr = document.createElement('br');
          range.deleteContents();
          range.insertNode(nodeBr);
          range.setStartAfter(nodeBr);
          sel.setSingleRange(range);
        }
        break;
      default:
        // this.props.onChange('xxx');
        break;
    }
  };

  Editor.prototype.onKeyup = function onKeyup(e) {
    // if (this.props.panelVisible) {return;}
    switch (e.keyCode) {
      case _keycode.KEYCODE.UP:
      case _keycode.KEYCODE.DOWN:
        if (this.props.panelVisible) {
          e.preventDefault();
        }
        break;
      case _keycode.KEYCODE.ENTER:
        break;
      default:
        var sel = rangy.getSelection();
        var range = sel.getRangeAt(0);
        if (range.commonAncestorContainer.nodeType === 3) {
          range.setStart(range.commonAncestorContainer, 0);
          var originStr = range.toString();
          var str = (0, _util.parseStrByDelimiter)(originStr, '@');
          // send str to matcher
          this.props.matcher(str);
          if (str) {
            this.props.setCursorPos(range.getEndClientPos());
            // set range's start position before delimiter
            range.setStart(range.commonAncestorContainer, originStr.length - str.length - 1);
            // save range position
            STORE.bookmark = range.getBookmark(range.commonAncestorContainer);
          }
        }
        break;
    }
  };

  Editor.prototype.onBlur = function onBlur() {
    this.emitChange();
    this.setState({
      focus: false
    });
  };

  Editor.prototype.onFocus = function onFocus() {
    this.setState({
      focus: true
    });
  };

  Editor.prototype.insertMentionTarget = function insertMentionTarget(mentionData) {
    // console.log(mentionData);
    var editor = this.refs.editor;
    var sel = rangy.getSelection();
    var formatter = this.props.formatter;
    if (STORE.bookmark) {
      var range = sel.getRangeAt(0);
      range.moveToBookmark(STORE.bookmark);
      var mentionNode = document.createElement('input');
      mentionNode.setAttribute('type', 'button');
      mentionNode.setAttribute('tabindex', '-1');
      mentionNode.className = this.props.prefixCls + '-node';
      mentionNode.value = formatter(mentionData);
      // delete origin content in range
      range.deleteContents();
      range.insertNode(mentionNode);
      range.collapseAfter(mentionNode);
      range.select();
      setTimeout(function () {
        editor.focus();
      }, 0);
    }
  };

  Editor.prototype.extractContent = function extractContent() {
    var editor = this.refs.editor;
    var nodes = editor.childNodes;
    var content = '';
    for (var i = 0, len = nodes.length; i < len; i += 1) {
      var node = nodes[i];
      if (node.nodeType === Node.ELEMENT_NODE) {
        var tagName = node.tagName.toLowerCase();
        if (tagName === 'input') {
          content += ' ' + node.value + ' ';
        } else if (tagName === 'br') {
          content += '\n';
        }
      } else if (node.nodeType === Node.TEXT_NODE) {
        content += node.textContent || node.nodeValue;
      }
    }
    return content;
  };

  Editor.prototype.emitChange = function emitChange(e) {
    var editor = this.refs.editor;

    var lastHtml = this.lastHtml;
    var currentHtml = editor.innerHTML;
    if (lastHtml === currentHtml) {
      // no change made
      return;
    }
    this.lastHtml = currentHtml;

    var content = this.extractContent();
    this.setState({
      value: content
    });
    this.props.onChange(e, content);
  };

  Editor.prototype.render = function render() {
    var style = {
      width: this.props.width,
      height: this.props.height
    };
    return _react2["default"].createElement(
      'div',
      { className: this.props.prefixCls },
      _react2["default"].createElement('div', { className: this.props.prefixCls + '-editor', ref: 'editor',
        onKeyUp: this.onKeyup.bind(this),
        onKeyDown: this.onKeydown.bind(this),
        contentEditable: contentEditableValue,
        onInput: this.emitChange.bind(this),
        onBlur: this.onBlur.bind(this),
        onFocus: this.onFocus.bind(this),
        style: style }),
      !this.state.focus && !this.state.value ? _react2["default"].createElement(
        'div',
        { className: this.props.prefixCls + '-placeholder' },
        this.props.placeholder
      ) : ''
    );
  };

  return Editor;
}(_react2["default"].Component);

exports["default"] = Editor;

Editor.displayName = 'uxcore-mention-editor';
Editor.propType = {
  prefixCls: _react2["default"].PropTypes.string,
  width: _react2["default"].PropTypes.number,
  height: _react2["default"].PropTypes.number,
  placeholder: _react2["default"].PropTypes.string,
  mentionTarget: _react2["default"].PropTypes.object,
  matcher: _react2["default"].PropTypes.func,
  setCursorPos: _react2["default"].PropTypes.func,
  panelVisible: _react2["default"].PropTypes.bool,
  formatter: _react2["default"].PropTypes.func,
  onChange: _react2["default"].PropTypes.func,
  value: _react2["default"].PropTypes.string
};
Editor.defaultProps = {
  prefixCls: '',
  width: 200,
  height: 100,
  placeholder: '',
  mentionTarget: null,
  matcher: function matcher() {},
  setCursorPos: function setCursorPos() {},
  panelVisible: false,
  formatter: function formatter() {},
  onChange: function onChange() {},
  value: ''
};
module.exports = exports['default'];