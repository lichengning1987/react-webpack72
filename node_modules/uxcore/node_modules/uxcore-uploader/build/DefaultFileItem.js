'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var React = require('react');
var ReactDOM = require('react-dom');
var util = require('./util');
var i18n = require('./locale');

var DefaultFileItem = function (_React$Component) {
    _inherits(DefaultFileItem, _React$Component);

    function DefaultFileItem(props) {
        _classCallCheck(this, DefaultFileItem);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    DefaultFileItem.prototype.onCancel = function onCancel(file) {
        var me = this;
        me.props.onCancel(file);
    };

    DefaultFileItem.prototype.render = function render() {
        var me = this;
        var _me$props = me.props;
        var locale = _me$props.locale;
        var file = _me$props.file;
        var mode = _me$props.mode;
        var isOnlyImg = _me$props.isOnlyImg;

        var response = util.simpleDeepCopy(file.response);
        if (file.type == 'upload') {
            response = response.content ? response.content.data ? response.content.data : response.content : response.data;
        }
        var downloadUrl = response.downloadUrl || response.file || response.url;
        var previewUrl = response.previewUrl || downloadUrl;
        if (mode === 'icon') {
            return React.createElement(
                'div',
                { className: "kuma-upload-fileitem" },
                React.createElement(
                    'a',
                    { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this), title: i18n[locale]['remove'] },
                    React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                ),
                React.createElement(
                    'div',
                    { className: 'filepreview' },
                    React.createElement(
                        'div',
                        { className: 'previewer' },
                        React.createElement('img', { src: previewUrl })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'filename', title: response.name },
                    util.natcut(response.name, 10)
                )
            );
        } else if (mode === 'nw') {
            if (isOnlyImg) {
                return React.createElement(
                    'div',
                    { className: "kuma-upload-fileitem-img" },
                    React.createElement(
                        'div',
                        { className: 'field-image-info' },
                        React.createElement(
                            'a',
                            { className: 'field-image-preview', href: previewUrl, target: '_blank' },
                            React.createElement('img', { src: previewUrl })
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'field-status' },
                        response.canRemove !== false ? React.createElement(
                            'a',
                            { className: 'kuma-upload-action', onClick: this.onCancel.bind(this, file) },
                            React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                        ) : undefined
                    )
                );
            } else {
                return React.createElement(
                    'div',
                    { className: "kuma-upload-fileitem" },
                    React.createElement(
                        'label',
                        { className: 'field-icon' },
                        React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': file.ext, 'data-type': file.fileType })
                    ),
                    React.createElement(
                        'div',
                        { className: 'field-info-wrap' },
                        React.createElement(
                            'label',
                            { className: 'field-info' },
                            React.createElement(
                                'span',
                                { className: 'filename' },
                                file.name
                            )
                        ),
                        React.createElement(
                            'label',
                            { className: 'field-status' },
                            React.createElement(
                                'a',
                                { className: 'kuma-upload-action close-action', onClick: this.onCancel.bind(this, file) },
                                React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                            ),
                            previewUrl ? React.createElement(
                                'a',
                                { className: 'kuma-upload-action preview-action', target: '_blank', href: previewUrl },
                                i18n[locale]['preview']
                            ) : null,
                            downloadUrl ? React.createElement(
                                'a',
                                { className: 'kuma-upload-action download-action', target: '_blank', download: true, href: downloadUrl },
                                i18n[locale]['download']
                            ) : null
                        )
                    )
                );
            }
        } else {
            return React.createElement(
                'div',
                { className: "kuma-upload-fileitem" },
                React.createElement(
                    'label',
                    { className: 'field-info' },
                    React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': file.ext, 'data-type': file.fileType }),
                    React.createElement(
                        'span',
                        { className: 'filename', title: file.name },
                        util.natcut(response.name, 12)
                    )
                ),
                React.createElement(
                    'label',
                    { className: 'field-status' },
                    React.createElement(
                        'a',
                        { className: 'kuma-upload-status status-success' },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-choose' })
                    ),
                    React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this, file), title: i18n[locale]['remove'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                    )
                )
            );
        }
    };

    return DefaultFileItem;
}(React.Component);

module.exports = DefaultFileItem;