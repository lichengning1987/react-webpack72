'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var FileItem = require('./FileItem');
var DefaultFileItem = require('./DefaultFileItem');
var Picker = require('./Picker');

var _require = require('uploadcore');

var Events = _require.Events;
var Status = _require.Status;

var React = require('react');
var ReactDOM = require('react-dom');

var FileList = function (_React$Component) {
    _inherits(FileList, _React$Component);

    function FileList(props) {
        _classCallCheck(this, FileList);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.core = props.core;

        _this.state = {
            items: _this.core.getStat().getFiles()
        };
        return _this;
    }

    FileList.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        var statchange = function statchange(stat) {
            _this2.setState({
                items: stat.getFiles()
            });
        };
        this.core.on(Events.QUEUE_STAT_CHANGE, statchange);
        this.stopListen = function () {
            _this2.core.off(Events.QUEUE_STAT_CHANGE, statchange);
        };
    };

    FileList.prototype.componentWillUnmount = function componentWillUnmount() {
        this.stopListen && this.stopListen();
    };

    FileList.prototype.renderDefaultFileItems = function renderDefaultFileItems() {
        var _this3 = this;

        var arr = [];
        this.props.fileList.forEach(function (file, index) {
            if (file.type !== 'delete') {
                arr.push(React.createElement(DefaultFileItem, { file: file, locale: _this3.props.locale, key: index, mode: _this3.props.mode, isOnlyImg: _this3.props.isOnlyImg, onCancel: _this3.props.removeFileFromList.bind(_this3) }));
            }
        });
        return arr;
    };

    FileList.prototype.renderFileItems = function renderFileItems() {
        var _this4 = this;

        var arr = [];
        this.state.items.forEach(function (file) {
            if (file.status !== Status.SUCCESS && file.status !== Status.CANCELLED) {
                arr.push(React.createElement(FileItem, { locale: _this4.props.locale, key: file.id, file: file, mode: _this4.props.mode, isOnlyImg: _this4.props.isOnlyImg, interval: _this4.props.interval }));
            }
        });
        return arr;
    };

    FileList.prototype.render = function render() {
        return React.createElement(
            'div',
            { className: "kuma-upload-filelist " + (this.props.mode === 'nw' ? 'nwmode' : this.props.mode === 'mini' ? 'minimode' : 'iconmode') },
            React.createElement(
                'div',
                { className: 'inner' },
                this.renderDefaultFileItems(),
                this.renderFileItems(),
                !this.core.isFull() && this.props.mode === 'icon' ? React.createElement(
                    Picker,
                    { core: this.core },
                    React.createElement('i', { className: 'kuma-icon kuma-icon-add' })
                ) : null
            )
        );
    };

    return FileList;
}(React.Component);

FileList.defaultProps = {
    mode: 'mini'
};

module.exports = FileList;