'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var React = require('react');
var ReactDOM = require('react-dom');
var util = require('./util');
var UxcoreProgress = require('uxcore-progress');
var Line = UxcoreProgress.Line;

var Progress = function (_React$Component) {
    _inherits(Progress, _React$Component);

    function Progress(props) {
        _classCallCheck(this, Progress);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            percentage: 0
        };
        return _this;
    }

    Progress.prototype.componentDidMount = function componentDidMount() {

        var t = null;
        var me = this;
        var percentage = me.state.percentage;
        me._isMounted = true;
        me.t = setInterval(function () {
            percentage = percentage + 5;
            if (me._isMounted) {
                me.setState({
                    percentage: percentage
                });
            }

            if (percentage === 95) {
                clearInterval(me.t);
            }
        }, me.props.interval);
    };

    Progress.prototype.componentWillUnmount = function componentWillUnmount() {
        var me = this;
        me._isMounted = false;
        clearInterval(me.t);
    };

    Progress.prototype.render = function render() {
        return React.createElement(Line, { percent: this.state.percentage, strokeWidth: 8 });
    };

    return Progress;
}(React.Component);

Progress.propTypes = {
    percentage: React.PropTypes.number,
    interval: React.PropTypes.number
};
Progress.defaultProps = {
    percentage: 0,
    interval: 100
};

module.exports = Progress;