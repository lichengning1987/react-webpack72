'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Preview = require('./Preview');
var Progress = require('./Progress');
var util = require('./util');

var _require = require('uploadcore');

var Events = _require.Events;

var React = require('react');
var ReactDOM = require('react-dom');
var i18n = require('./locale');

var FileItem = function (_React$Component) {
    _inherits(FileItem, _React$Component);

    function FileItem(props) {
        _classCallCheck(this, FileItem);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        var file = props.file;
        _this.file = file;

        _this.state = {
            percentage: file.progress ? file.progress.percentage : 0,
            status: file.getStatusName()
        };
        return _this;
    }

    FileItem.prototype.componentDidMount = function componentDidMount() {
        var file = this.file;
        var me = this;
        me._isMounted = true;
        var statuschange = function statuschange() {
            if (me._isMounted) {
                var state = {
                    status: file.getStatusName()
                };
                if (state.status === 'error') {
                    state.percentage = 0;
                }
                me.setState(state);
            }
        };
        var progress = function progress(_progress) {
            if (me._isMounted) {
                me.setState({
                    percentage: _progress.percentage
                });
            }
        };
        file.on(Events.FILE_STATUS_CHANGE, statuschange);
        file.on(Events.FILE_UPLOAD_PROGRESS, progress);
        this.stopListen = function () {
            file.off(Events.FILE_STATUS_CHANGE, statuschange);
            file.off(Events.FILE_UPLOAD_PROGRESS, progress);
        };
    };

    FileItem.prototype.componentWillUnmount = function componentWillUnmount() {
        this._isMounted = false;
        this.stopListen && this.stopListen();
    };

    FileItem.prototype.onPending = function onPending() {
        this.file.pending();
    };

    FileItem.prototype.onCancel = function onCancel() {
        this.file.cancel();
    };

    FileItem.prototype.render = function render() {
        var me = this;
        var _me$props = me.props;
        var locale = _me$props.locale;
        var interval = _me$props.interval;

        if (this.props.mode === 'icon') {
            return React.createElement(
                'div',
                { className: "kuma-upload-fileitem status-" + this.state.status },
                React.createElement(
                    'a',
                    { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this), title: i18n[locale]['remove'] },
                    React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                ),
                React.createElement(
                    'div',
                    { className: 'filepreview' },
                    React.createElement(Preview, { file: this.props.file }),
                    this.state.status === 'error' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-retry', onClick: this.onPending.bind(this), title: i18n[locale]['retry'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-refresh' })
                    ) : null,
                    this.state.status === 'queued' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-upload', onClick: this.onPending.bind(this), title: i18n[locale]['upload'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })
                    ) : null,
                    this.state.status === 'progress' || this.state.status === 'pending' ? React.createElement(Progress, { interval: interval, percentage: this.state.percentage }) : null
                ),
                this.state.status === 'error' ? React.createElement(
                    'a',
                    { className: 'kuma-upload-status status-error', title: i18n[locale]['upload_failed'] },
                    React.createElement('i', { className: 'kuma-icon kuma-icon-caution' })
                ) : null,
                this.state.status === 'success' ? React.createElement(
                    'a',
                    { className: 'kuma-upload-status status-success' },
                    React.createElement('i', { className: 'kuma-icon kuma-icon-choose' })
                ) : null,
                React.createElement(
                    'div',
                    { className: 'filename', title: this.file.name },
                    util.natcut(this.file.name, 10)
                )
            );
        } else if (this.props.mode === 'nw') {
            var downloadUrl = void 0,
                previewUrl = void 0;
            if (this.state.status === 'success') {

                var json = this.file.response.getJson();
                try {
                    var data = json.content ? json.content.data ? json.content.data : json.content : json.data;
                    downloadUrl = data.downloadUrl || data.file || data.url;
                    previewUrl = data.previewUrl || downloadUrl;
                } catch (e) {
                    console.error('data or content not found in response, maybe you should set response by yourself');
                }
            }
            if (this.props.isOnlyImg) {
                return React.createElement(
                    'div',
                    { className: "kuma-upload-fileitem-img status-" + this.state.status },
                    React.createElement(
                        'div',
                        { className: 'field-image-info' },
                        React.createElement(
                            'a',
                            { className: 'field-image-preview', href: previewUrl, target: '_blank' },
                            React.createElement('img', { src: previewUrl })
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'field-status' },
                        React.createElement(
                            'a',
                            { className: 'kuma-upload-action', onClick: this.onCancel.bind(this) },
                            React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                        )
                    )
                );
            } else {
                return React.createElement(
                    'div',
                    { className: "kuma-upload-fileitem status-" + this.state.status },
                    React.createElement(
                        'label',
                        { className: 'field-icon' },
                        this.state.status === 'error' ? React.createElement('i', { className: 'kuma-icon kuma-icon-caution' }) : null,
                        this.state.status !== 'error' ? React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }) : null
                    ),
                    React.createElement(
                        'div',
                        { className: 'field-info-wrap' },
                        React.createElement(
                            'label',
                            { className: 'field-info' },
                            React.createElement(
                                'span',
                                { className: 'filename' },
                                this.file.name
                            )
                        ),
                        React.createElement(
                            'label',
                            { className: 'field-status' },
                            this.state.status === 'error' ? React.createElement(
                                'a',
                                { className: 'kuma-upload-status status-error' },
                                i18n[locale]['upload_failed']
                            ) : null,
                            this.state.status !== 'error' && this.state.status !== 'success' ? React.createElement(Progress, { interval: interval }) : null,
                            this.state.status === 'success' || this.state.status === 'error' ? React.createElement(
                                'a',
                                { className: 'kuma-upload-action close-action', onClick: this.onCancel.bind(this) },
                                React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                            ) : null,
                            this.state.status === 'success' && previewUrl ? React.createElement(
                                'a',
                                { className: 'kuma-upload-action', target: '_blank', href: previewUrl },
                                i18n[locale]['preview']
                            ) : null,
                            this.state.status === 'success' && downloadUrl ? React.createElement(
                                'a',
                                { className: 'kuma-upload-action', target: '_blank', href: downloadUrl, download: true },
                                i18n[locale]['download']
                            ) : null
                        )
                    )
                );
            }
        } else {
            var size = util.humanSizeFormat(this.file.size);
            return React.createElement(
                'div',
                { className: "kuma-upload-fileitem status-" + this.state.status },
                React.createElement(
                    'label',
                    { className: 'field-info' },
                    React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }),
                    React.createElement(
                        'span',
                        { className: 'filename', title: this.file.name },
                        util.natcut(this.file.name, 12)
                    ),
                    React.createElement(
                        'span',
                        { className: 'filesize' },
                        '/' + size
                    )
                ),
                React.createElement(
                    'label',
                    { className: 'field-status' },
                    this.state.status === 'error' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-status status-error', title: i18n[locale]['upload_failed'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-caution' })
                    ) : null,
                    this.state.status === 'success' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-status status-success' },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-choose' })
                    ) : null,
                    this.state.status === 'error' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-retry', onClick: this.onPending.bind(this), title: i18n[locale]['retry'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-refresh' })
                    ) : null,
                    this.state.status === 'queued' ? React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-upload', onClick: this.onPending.bind(this), title: i18n[locale]['upload'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })
                    ) : null,
                    React.createElement(
                        'a',
                        { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this), title: i18n[locale]['remove'] },
                        React.createElement('i', { className: 'kuma-icon kuma-icon-close' })
                    )
                ),
                React.createElement(Progress, { interval: interval, percentage: this.state.percentage, mode: 'bar' })
            );
        }
    };

    return FileItem;
}(React.Component);

FileItem.defaultProps = {
    mode: 'mini'
};

module.exports = FileItem;