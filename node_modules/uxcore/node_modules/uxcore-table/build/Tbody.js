'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Created by xy on 15/4/13.
 */

var Row = require('./Row');
// const Mask = require('./Mask');
var util = require('./util');
var deepcopy = require('deepcopy');
var React = require('react');
var ReactDOM = require('react-dom');
var addEventListener = require('rc-util/lib/Dom/addEventListener');
var throttle = require('lodash/throttle');

var Tbody = function (_React$Component) {
  _inherits(Tbody, _React$Component);

  function Tbody(props) {
    _classCallCheck(this, Tbody);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {};
    return _this;
  }

  Tbody.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    me.rootEl = me.refs.root;
    me.scrollHandler = throttle(me.onScroll.bind(me), 20);
    me.scrollListener = addEventListener(me.rootEl, 'scroll', me.scrollHandler);
  };

  Tbody.prototype.componentWillUnmount = function componentWillUnmount() {
    var me = this;
    me.scrollListener.remove();
  };

  Tbody.prototype.getDomNode = function getDomNode() {
    return this.refs.root;
  };

  Tbody.prototype.renderEmptyData = function renderEmptyData() {
    if (this.props.data.length === 0 && !this.props.mask) {
      var style = {
        lineHeight: this.props.height - 10 + 'px'
      };
      return React.createElement(
        'div',
        { className: 'kuma-uxtable-body-emptyword', style: style },
        this.props.root.props.emptyText
      );
    }
  };

  Tbody.prototype.onScroll = function onScroll(e) {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    if (fixedColumn !== 'fixed') {
      if (me.scrollEndTimer) {
        clearTimeout(me.scrollEndTimer);
      }
      me.scrollEndTimer = setTimeout(function () {
        me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop);
      }, 500);
      me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop);
    }
  };

  Tbody.prototype.render = function render() {
    var me = this,
        _props = me.props,
        _columns = _props.columns,
        _data = _props.data.length > 0 ? _props.data : [],
        _style = {},
        _width = 0,
        bodyWrapClassName = void 0;

    if (_props.fixedColumn == 'fixed') {
      _columns = _props.columns.filter(function (item) {
        if (item.fixed && !item.hidden) {
          if (!item.width) {
            item.width = 100;
          }
          _width = item.width * 1 + _width;
          return true;
        }
      });
      _style = {
        width: _width,
        minWidth: _width
      };
      bodyWrapClassName = "kuma-uxtable-body-fixed";
    } else if (_props.fixedColumn == 'scroll') {
      var fixedWidth = 0;
      _columns = _props.columns.filter(function (item) {
        if (!item.fixed) {
          return true;
        } else if (!item.hidden) {
          if (!item.width) {
            item.width = 100;
          }
          _width = item.width * 1 + _width;
        }
      });

      // content-box: border-box
      var delta = 2;
      if (util.getIEVer() === 8) {
        delta = 3;
      }
      _style = {
        width: _props.width - _width - delta, //change 2 to 3, fix ie8 issue
        minWidth: _props.width - _width - delta
      };
      bodyWrapClassName = "kuma-uxtable-body-scroll";
    } else {
      bodyWrapClassName = "kuma-uxtable-body-no";
    }
    return React.createElement(
      'div',
      { className: bodyWrapClassName, ref: 'root', style: _style },
      React.createElement(
        'ul',
        { className: this.props.jsxprefixCls },
        this.renderEmptyData(),
        _data.map(function (item, index) {
          var renderProps = {
            columns: _columns,
            rowIndex: item.jsxid, //tree mode, rowIndex need think more, so use jsxid
            rowData: deepcopy(_data[index]),
            index: index,
            data: _data,
            root: _props.root,
            subComp: _props.subComp,
            actions: _props.actions,
            key: 'row' + index,
            mode: _props.mode,
            renderModel: _props.renderModel,
            fixedColumn: _props.fixedColumn,
            level: 1,
            levels: _props.levels,
            expandedKeys: _props.expandedKeys,
            renderSubComp: _props.renderSubComp,
            changeSelected: me.props.changeSelected,
            checkboxColumnKey: _props.checkboxColumnKey,
            addRowClassName: _props.addRowClassName,
            rowSelection: _props.rowSelection,
            handleDataChange: _props.handleDataChange,
            attachCellField: _props.attachCellField,
            detachCellField: _props.detachCellField,
            visible: true,
            last: index === _data.length - 1
          };
          return React.createElement(Row, renderProps);
        })
      )
    );
  };

  return Tbody;
}(React.Component);

;

Tbody.propTypes = {};

Tbody.defaultProps = {
  jsxprefixCls: "kuma-uxtable-body"
};

exports["default"] = Tbody;
module.exports = exports['default'];