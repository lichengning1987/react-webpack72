'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * A checkbox field
 */

var Const = require('uxcore-const');
var React = require('react');
var ReactDOM = require('react-dom');
var classnames = require('classnames');

var CheckBox = function (_React$Component) {
    _inherits(CheckBox, _React$Component);

    function CheckBox(props) {
        _classCallCheck(this, CheckBox);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    CheckBox.prototype.handleChange = function handleChange(e) {
        this.props.onChange(e);
    };

    CheckBox.prototype.getValue = function getValue() {
        return this.refs.checkbox.checked;
    };

    CheckBox.prototype.handleClick = function handleClick() {
        // simulate checkbox
        this.props.onChange({
            target: {
                checked: true
            }
        });
    };

    CheckBox.prototype.renderHalfChecked = function renderHalfChecked() {
        return React.createElement(
            'span',
            { className: 'kuma-uxtable-row-selector' },
            React.createElement('i', { className: 'half-checked', onClick: this.handleClick.bind(this) })
        );
    };

    CheckBox.prototype.renderCheckBox = function renderCheckBox(renderProps) {
        return React.createElement(
            'label',
            { className: classnames(_defineProperty({
                    "kuma-uxtable-row-selector": true
                }, this.props.className, !!this.props.className)) },
            React.createElement('input', _extends({ type: 'checkbox', ref: 'checkbox' }, renderProps)),
            React.createElement('s', null)
        );
    };

    CheckBox.prototype.render = function render() {

        var props = this.props;
        if (props.halfChecked) {
            return this.renderHalfChecked();
        }
        var renderProps = {
            className: "kuma-checkbox",
            checked: this.props.checked,
            onChange: this.handleChange.bind(this)
        };
        if (!!props.disable || props.mode == Const.MODE.VIEW) {
            renderProps.disabled = true;
        }
        return this.renderCheckBox(renderProps);
    };

    return CheckBox;
}(React.Component);

;

CheckBox.propTypes = {};

CheckBox.defaultProps = {};

module.exports = CheckBox;