'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Created by xy on 15/4/13.
 */

var React = require('react');
var Const = require('uxcore-const');
var Dropdown = require('uxcore-dropdown');
var Menu = require('uxcore-menu');
var CheckBox = require('./CheckBox');
var Radio = require('./Radio');
var TextField = require('./TextField');
var SelectField = require('./SelectField');
var RadioField = require('./RadioField');
var util = require('./Util');
var classnames = require('classnames');
var deepcopy = require('deepcopy');
var deepEqual = require('deep-equal');

var fieldsMap = {
  select: SelectField,
  text: TextField,
  radio: RadioField
};

var Cell = function (_React$Component) {
  _inherits(Cell, _React$Component);

  function Cell(props) {
    _classCallCheck(this, Cell);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      dropdownVisible: false
    };
    return _this;
  }

  Cell.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    // 需要考虑的 prop 包括
    // column, rowData, rowIndex(s), index(s), cellIndex(s), hasSubComp(s)
    // rowSelection, actions, mode(s)
    var me = this;
    var shouldUpdate = false;

    // only tree mode has children
    if ('children' in nextProps) {
      return true;
    }

    ['rowIndex', 'index', 'cellIndex', 'hasSubComp', 'mode'].forEach(function (item) {
      if (me.props[item] !== nextProps[item]) {
        shouldUpdate = true;
      }
    });

    if (!shouldUpdate) {
      ['dropdownVisible'].forEach(function (item) {
        if (me.state[item] !== nextProps[item]) {
          shouldUpdate = true;
        }
      });
    }
    if (!shouldUpdate) {
      ['column', 'rowSelection', 'rowData', 'actions'].forEach(function (item) {
        if (!deepEqual(me.props[item], nextProps[item])) {
          shouldUpdate = true;
        }
      });
    }

    return shouldUpdate;
  };

  Cell.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    if (me.props.column.type == "checkbox" || me.props.column.type == "checkboxSelector" || me.props.column.type == "radioSelector") {
      me.props.changeSelected(me.getCellData(), me.props.rowIndex, true);
    }
  };

  Cell.prototype.handleCheckChange = function handleCheckChange(e) {
    var me = this,
        _props = this.props,
        v = _props.rowData;
    me.props.changeSelected(e.target.checked, _props.rowIndex, false);
  };

  Cell.prototype.handleDropdownVisibleChange = function handleDropdownVisibleChange(visible) {
    var me = this;
    me.setState({
      dropdownVisible: visible
    });
  };

  Cell.prototype.showSubComp = function showSubComp() {
    this.props.showSubCompCallback.apply();
  };

  /**
   * @param actions {Array or Object}
   */


  Cell.prototype.getActionItems = function getActionItems(actions) {
    if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== "object") {
      console.error("Table: Actions should be an object or array");
      return [];
    } else {
      var me = this;
      me.items = [];
      if (actions instanceof Array) {
        me.items = actions;
      } else {
        for (var i in actions) {
          if (actions.hasOwnProperty(i)) {
            me.items.push({
              title: i,
              callback: actions[i]
            });
          }
        }
      }

      return me.items;
    }
  };

  Cell.prototype.getEditData = function getEditData() {
    var me = this;
    var column = me.props.column;
    var editKey = column.editKey || column.dataKey;
    return me.props.rowData[editKey];
  };

  Cell.prototype.getCellData = function getCellData(nextProps) {

    var props = nextProps || this.props,
        _column = props.column,
        cellData = props.rowData[_column.dataKey];

    return cellData;
  };

  Cell.prototype.handleActionClick = function handleActionClick(cb, e) {
    e.stopPropagation();
    var me = this;
    me.setState({
      dropdownVisible: false
    });
    cb && cb();
  };

  Cell.prototype.render = function render() {
    var _classnames;

    var me = this,
        props = me.props,
        _column = props.column,
        _width = _column.width,
        _mode = props.rowData['__mode__'],
        _style = {
      width: _width ? _width : 100,
      textAlign: props.column.align ? props.column.align : "left"
    },
        _v = deepcopy(props.rowData),
        renderProps = void 0;

    if (_column.type == 'action') {
      _v = React.createElement(
        'div',
        { className: 'action-container' },
        me.renderActionItems(_column, _v, _mode)
      );
    } else if (_column.type == 'checkbox' || _column.type == 'checkboxSelector') {

      _style.paddingRight = 4;
      _style.paddingLeft = 12;

      var checked = me.getCellData();
      var disable = false;
      if ('disable' in _column) {
        disable = _column.disable;
      } else if ('isDisable' in _column) {
        disable = !!_column.isDisable(props.rowData);
      }
      _v = React.createElement(CheckBox, { disable: disable, mode: props.mode, align: props.column.align, checked: checked, ref: 'checkbox', onChange: me.handleCheckChange.bind(me) });
    } else if (_column.type == 'radioSelector') {
      _style.paddingRight = 4;
      _style.paddingLeft = 12;

      var _checked = me.getCellData();
      var _disable = false;
      if ('disable' in _column) {
        _disable = _column.disable;
      } else if ('isDisable' in _column) {
        _disable = !!_column.isDisable(props.rowData);
      }
      _v = React.createElement(Radio, { disable: _disable, mode: props.mode, align: props.column.align, checked: _checked, onChange: me.handleCheckChange.bind(me) });
    } else if (_column.type == 'treeIcon') {
      _v = me.renderTreeIcon();
    }

    // inline edit mode
    else if ((_column.type == 'custom' || _column.type in fieldsMap) && _mode == Const.MODE.EDIT && (!('canEdit' in _column) || _column.canEdit(props.rowData))) {
        renderProps = {
          value: me.getEditData(),
          rowData: props.rowData,
          index: props.index,
          column: _column,
          handleDataChange: props.handleDataChange,
          attachCellField: props.attachCellField,
          detachCellField: props.detachCellField
        };
        var Field = void 0;

        if (_column.type == 'custom') {
          Field = props.column.customField;
        } else {
          Field = fieldsMap[_column.type];
        }
        _v = React.createElement(Field, renderProps);
      } else if (_column.type == 'money' || _column.type == "card" || _column.type == "cnmobile") {
        _v = React.createElement(
          'div',
          { className: 'default-cell', title: me.getCellData() },
          util.formatValue(me.getCellData(), _column.type, _column.delimiter)
        );
      } else if (_column.render) {
        _v = _column.render.apply(null, [me.getCellData(), _v]);
      } else {
        _v = React.createElement(
          'div',
          { className: 'default-cell', title: me.getCellData() },
          me.getCellData()
        );
      }

    var child = me.props.children;
    return React.createElement(
      'div',
      { className: classnames((_classnames = {}, _defineProperty(_classnames, props.jsxprefixCls, true), _defineProperty(_classnames, 'last', props.last), _classnames)), style: _style },
      child,
      _v
    );
  };

  /**
   * @param {Object} column current column config
   * @param {Object} rowData current row data
   * @param {String} mode current row mode: edit or view, same as rowData['__mode__']
   */

  Cell.prototype.renderActionItems = function renderActionItems(column, rowData, mode) {
    var me = this;
    var actions = me.getActionItems(column.actions).filter(function (item) {
      return !('mode' in item) || item.mode === mode;
    });
    if (actions.length <= (parseInt(column.collapseNum, 10) || 3) - 1) {
      return actions.map(function (item, index) {
        return React.createElement(
          'a',
          {
            href: 'javascript:void(0);',
            key: index, className: 'action',
            onClick: me.handleActionClick.bind(me, item.callback.bind(me, rowData, me.props.root))
          },
          item.render ? item.render(item.title, deepcopy(me.props.rowData)) : item.title
        );
      });
    }
    var arr = [];
    arr.push(React.createElement(
      'a',
      {
        href: 'javascript:void(0);',
        className: 'action',
        key: 'action',
        onClick: me.handleActionClick.bind(me, actions[0].callback.bind(me, rowData, me.props.root))
      },
      actions[0].render ? actions[0].render(actions[0].title, me.props.rowData) : actions[0].title
    ));
    var menu = React.createElement(
      Menu,
      null,
      actions.slice(1).map(function (action, index) {
        return React.createElement(
          Menu.Item,
          { key: index },
          React.createElement(
            'a',
            { href: 'javascript:void(0);', className: 'action', key: 'action', onClick: me.handleActionClick.bind(me, action.callback.bind(me, rowData, me.props.root)) },
            action.render ? action.render(action.title, me.props.rowData) : action.title
          )
        );
      })
    );
    arr.push(React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-down', key: 'icon' }));
    var dropdownOptions = {
      key: 'icon',
      overlay: menu,
      trigger: ['click'],
      visible: me.state.dropdownVisible,
      onVisibleChange: me.handleDropdownVisibleChange.bind(me)
    };
    return React.createElement(
      Dropdown,
      dropdownOptions,
      React.createElement(
        'span',
        null,
        arr
      )
    );
  };

  Cell.prototype.renderTreeIcon = function renderTreeIcon() {
    if (this.props.cellIndex == 0 && this.props.hasSubComp) {
      var open = this.props.rowData.showSubComp;
      return React.createElement(
        'span',
        { className: 'kuma-uxtable-tree-icon', onClick: this.showSubComp.bind(this) },
        React.createElement('i', { className: classnames({
            "kuma-icon": true,
            "kuma-icon-tree-open": open,
            "kuma-icon-tree-close": !open
          }) })
      );
    }
  };

  return Cell;
}(React.Component);

;

Cell.propTypes = {};

Cell.defaultProps = {
  jsxprefixCls: "kuma-uxtable-cell"
};

exports["default"] = Cell;
module.exports = exports['default'];