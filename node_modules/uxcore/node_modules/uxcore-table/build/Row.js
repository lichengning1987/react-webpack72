'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Created by xy on 15/4/13.
 */
var Cell = require('./Cell');
var classnames = require('classnames');
var assign = require('object-assign');
var Const = require('uxcore-const');
var deepEqual = require('deep-equal');
var deepcopy = require('deepcopy');
var CheckBox = require('./Cell/CheckBox');
var util = require('./util');

var React = require('react');
var ReactDOM = require('react-dom');

var Row = function (_React$Component) {
    _inherits(Row, _React$Component);

    function Row(props) {
        _classCallCheck(this, Row);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            expanded: _this.props.level < _this.props.levels ? true : false
        };
        return _this;
    }

    Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        // 需要考虑的 prop 包括
        // columns, rowIndex(s => simple), rowData, index(s), addRowClassName(f), rowSelection, subComp(no support), renderSubComp(f), actions
        // mode(s), renderModel(s), fixedColumn(s), levels(s), visible(s), expandedKeys, checkboxColumnKey(s)
        var me = this;
        var shouldUpdate = false;

        ['rowIndex', 'index', 'mode', 'renderModel', 'fixedColumn', 'levels', 'addRowClassName', 'renderSubComp', 'visible', 'checkboxColumnKey'].forEach(function (item) {
            if (me.props[item] !== nextProps[item]) {
                shouldUpdate = true;
            }
        });
        if (!shouldUpdate) {
            ['columns', 'rowData', 'rowSelection', 'actions', 'expandedKeys'].forEach(function (item, index) {
                if (!deepEqual(me.props[item], nextProps[item])) {
                    shouldUpdate = true;
                }
            });
        };
        if (!shouldUpdate) {
            shouldUpdate = me.state.expanded !== nextState.expanded;
        }
        return shouldUpdate;
    };

    Row.prototype.handleClick = function handleClick(rowData) {
        var me = this;
    };

    Row.prototype.handleDoubleClick = function handleDoubleClick(rowData) {
        var table = this.props.root;
        if (table.props.doubleClickToEdit) {
            table.editRow(deepcopy(rowData));
        }
    };

    Row.prototype.handleTreeCheckChange = function handleTreeCheckChange(e) {
        var me = this;
        me.props.root.changeTreeSelected(e.target.checked, me.props.dataIndex || me.props.index);
    };

    Row.prototype.showSubCompFunc = function showSubCompFunc() {
        var me = this;
        me.props.root.toggleSubComp(me.props.rowData);
    };

    Row.prototype.toggleExpanded = function toggleExpanded(e) {
        e.stopPropagation();
        var me = this;
        var rowData = me.props.rowData;

        me.props.root.toggleTreeExpanded(rowData);
    };

    Row.prototype.renderSubComp = function renderSubComp() {
        var props = this.props;

        if (props.renderModel == 'tree') {
            return false;
        } else {
            if (props.subComp) {
                if (props.rowData.showSubComp) {
                    var subComp = React.cloneElement(props.subComp, {
                        passedData: this.props.rowData,
                        parentHasCheckbox: !!this.props.rowSelection,
                        parentHasCheck: !!this.props.rowSelection /////
                    });
                    return React.createElement(
                        'div',
                        { className: 'kuma-uxtable-subrow', ref: 'subRow' },
                        subComp
                    );
                }
                return false;
            } else if (props.renderSubComp) {
                var _subComp = props.renderSubComp(deepcopy(props.rowData));
                if (_subComp && props.rowData.showSubComp) {
                    return React.createElement(
                        'div',
                        { className: 'kuma-uxtable-subrow', ref: 'subRow' },
                        _subComp
                    );
                }
                return false;
            } else {
                return false;
            }
        }
    };

    Row.prototype.renderChild = function renderChild() {

        var props = this.props,
            me = this,
            children = [];

        if (props.renderModel !== 'tree') {
            return children;
        }
        if (props.rowData.data) {
            props.rowData.data.forEach(function (node, index) {
                var renderProps = assign({}, props, {
                    level: me.props.level + 1,
                    dataIndex: (me.props.dataIndex ? me.props.dataIndex : me.props.index) + '-' + index,
                    rowData: node,
                    rowIndex: node.jsxid,
                    key: node.jsxid,
                    showSubComp: false,
                    visible: props.expandedKeys.indexOf(props.rowData.jsxid) !== -1
                });
                children.push(React.createElement(Row, renderProps));
            });

            var renderProps = {
                key: "treeRow" + this.props.rowData.jsxid,
                className: "kuma-uxtable-tree-row"
            };

            children = React.createElement(
                'ul',
                renderProps,
                children
            );
        }

        return children;
    };

    Row.prototype.renderExpandIcon = function renderExpandIcon(rowIndex) {

        var expandCollapseIcon = void 0;
        var _expandIconClass = void 0;
        var props = this.props;

        if (props.renderModel !== 'tree') {
            return false;
        }

        if (props.rowData.data) {
            _expandIconClass = {
                "kuma-icon": true,
                "kuma-icon-triangle-right": true,
                "expanded": props.expandedKeys.indexOf(props.rowData.jsxid) !== -1
            };
            expandCollapseIcon = React.createElement(
                'span',
                { className: 'kuma-uxtable-expand-icon', 'data-type': props.fixedColumn, 'data-index': rowIndex,
                    onClick: this.toggleExpanded.bind(this) },
                React.createElement('i', { className: classnames(_expandIconClass) })
            );
        } else {
            expandCollapseIcon = React.createElement('span', { className: 'kuma-uxtable-emptyicon' });
        }
        return expandCollapseIcon;
    };

    Row.prototype.renderIndent = function renderIndent() {
        var indents = [];
        if (this.props.renderModel == 'tree') {
            for (var i = 0; i < this.props.level - 1; i++) {
                var renderProps = {
                    className: "indent",
                    key: 'indent' + i
                };
                indents.push(React.createElement('span', renderProps));
            }
        }

        return indents;
    };

    Row.prototype.renderTreeRowSelector = function renderTreeRowSelector() {
        if (this.props.renderModel !== 'tree' || !this.props.checkboxColumnKey) {
            return false;
        }
        var me = this;
        var _me$props = me.props;
        var rowData = _me$props.rowData;
        var checkboxColumnKey = _me$props.checkboxColumnKey;
        var prefixCls = _me$props.prefixCls;

        var isChecked = rowData[checkboxColumnKey];
        var isHalfChecked = false;
        if (!isChecked) {
            isHalfChecked = util.isRowHalfChecked(rowData, checkboxColumnKey);
        }
        return React.createElement(CheckBox, { checked: isChecked,
            halfChecked: isHalfChecked,
            className: prefixCls + '-tree-selector',
            onChange: me.handleTreeCheckChange.bind(me) });
    };

    Row.prototype.render = function render() {
        var _classnames;

        var props = this.props,
            _columns = [],
            _style = {},
            _data = props.data,
            me = this,
            otherCls = props.addRowClassName(_data[props.rowIndex]);

        if (!this.props.visible) {
            _style = {
                display: 'none'
            };
        }

        props.columns.forEach(function (column, index) {
            if ("group" in column) {
                _columns = _columns.concat(column.columns);
            } else {
                _columns.push(column);
            }
        });

        var firstVisableColumn = 0;

        return React.createElement(
            'li',
            { className: classnames((_classnames = {}, _defineProperty(_classnames, this.props.prefixCls, true), _defineProperty(_classnames, otherCls, !!otherCls), _defineProperty(_classnames, 'even', props.index % 2 == 1 ? true : false), _defineProperty(_classnames, 'last', this.props.last), _classnames)), style: _style,
                onClick: this.handleClick.bind(this, props.rowData),
                onDoubleClick: this.handleDoubleClick.bind(this, props.rowData) },
            React.createElement(
                'div',
                { className: this.props.prefixCls + '-cells' },
                _columns.map(function (item, index) {
                    var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1 && props.renderModel == 'tree';
                    if (item.hidden || rowSelectorInTreeMode) {
                        return null;
                    }
                    firstVisableColumn++;
                    var renderProps = {
                        column: item,
                        root: props.root,
                        rowData: props.rowData,
                        rowIndex: props.rowIndex,
                        index: props.index,
                        last: index === _columns.length - 1,
                        cellIndex: index,
                        hasSubComp: props.subComp ? true : props.renderSubComp ? !!props.renderSubComp(deepcopy(props.rowData)) : false,
                        changeSelected: me.props.changeSelected,
                        showSubCompCallback: me.showSubCompFunc.bind(me),
                        rowSelection: props.rowSelection,
                        actions: props.actions,
                        mode: props.mode,
                        handleDataChange: props.handleDataChange,
                        attachCellField: props.attachCellField,
                        detachCellField: props.detachCellField,
                        key: "cell" + index
                    };

                    if (firstVisableColumn == 1) {
                        return React.createElement(
                            Cell,
                            renderProps,
                            me.renderIndent(),
                            me.renderExpandIcon(props.rowIndex),
                            me.renderTreeRowSelector()
                        );
                    }
                    //if have vertical data structure, how to process it
                    return React.createElement(Cell, renderProps);
                })
            ),
            me.renderChild(),
            this.renderSubComp()
        );
    };

    return Row;
}(React.Component);

;

Row.propTypes = {
    prefixCls: React.PropTypes.string,
    showSubComp: React.PropTypes.bool
};

Row.defaultProps = {
    prefixCls: "kuma-uxtable-row",
    showSubComp: false
};

exports["default"] = Row;
module.exports = exports['default'];