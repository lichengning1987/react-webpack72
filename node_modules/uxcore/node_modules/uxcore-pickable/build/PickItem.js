'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var React = require('react');
var classnames = require('classnames');

var PickItem = function (_React$Component) {
  _inherits(PickItem, _React$Component);

  function PickItem(props) {
    _classCallCheck(this, PickItem);

    return _possibleConstructorReturn(this, _React$Component.call(this, props));
  }

  PickItem.prototype.handleClick = function handleClick(value) {
    if (!this.props.disabled) {
      this.props.onClick(value);
    }
  };

  PickItem.prototype.renderTips = function renderTips() {
    var me = this;
    var _me$props = me.props;
    var type = _me$props.type;
    var prefixCls = _me$props.prefixCls;
    var number = _me$props.number;

    if (type === 'simple' && number !== undefined) {
      return React.createElement(
        'span',
        { className: prefixCls + '-num' },
        number
      );
    } else if (type === 'hook') {
      return React.createElement('i', { className: prefixCls + '-icon-hook' });
    }
  };

  PickItem.prototype.render = function render() {
    var _classnames;

    var me = this;
    var _me$props2 = me.props;
    var prefixCls = _me$props2.prefixCls;
    var children = _me$props2.children;
    var active = _me$props2.active;
    var value = _me$props2.value;
    var disabled = _me$props2.disabled;
    var type = _me$props2.type;

    return React.createElement(
      'div',
      { className: classnames((_classnames = {}, _defineProperty(_classnames, '' + prefixCls, true), _defineProperty(_classnames, 'active', active), _defineProperty(_classnames, 'disabled', disabled), _defineProperty(_classnames, prefixCls + '-simple', type === 'simple'), _defineProperty(_classnames, prefixCls + '-hook', type === 'hook'), _classnames)), onClick: me.handleClick.bind(me, value) },
      children,
      me.renderTips()
    );
  };

  return PickItem;
}(React.Component);

PickItem.defaultProps = {
  disabled: false
};

PickItem.propTypes = {
  prefixCls: React.PropTypes.string,
  active: React.PropTypes.bool,
  disabled: React.PropTypes.bool,
  value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),
  // only useful in simple type now.
  number: React.PropTypes.number,
  type: React.PropTypes.oneOf(['normal', 'simple', 'hook'])
};

PickItem.displayName = 'PickItem';

module.exports = PickItem;