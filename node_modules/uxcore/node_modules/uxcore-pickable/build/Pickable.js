'use strict';

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * Pickable Component for uxcore
 * @author eternalsky
 *
 * Copyright 2015-2016, Uxcore Team, Alinw.
 * All rights reserved.
 */

var classnames = require('classnames');
var React = require('react');
var ReactDOM = require('react-dom');
var Item = require('./PickItem');

var Pickable = function (_React$Component) {
    _inherits(Pickable, _React$Component);

    function Pickable(props) {
        _classCallCheck(this, Pickable);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    Pickable.prototype.handleItemClick = function handleItemClick(value) {
        var me = this;

        var _me$props$value = _toArray(me.props.value);

        var values = _me$props$value;

        var index = values.indexOf(value);
        if (!me.props.multiple) {
            me.props.onChange([value], value);
            return;
        }
        if (index !== -1) {
            values.splice(index, 1);
            me.props.onChange(values, value);
        } else {
            values.push(value);
            me.props.onChange(values, value);
        }
    };

    Pickable.prototype.renderChildren = function renderChildren() {
        var me = this;
        var _me$props = me.props;
        var prefixCls = _me$props.prefixCls;
        var type = _me$props.type;
        var children = _me$props.children;
        var value = _me$props.value;
        var max = _me$props.max;

        var rendered = React.Children.map(children, function (child) {
            return React.cloneElement(child, {
                active: value.indexOf(child.props.value) !== -1,
                prefixCls: prefixCls + '-item',
                type: type,
                jsxmax: max,
                onClick: me.handleItemClick.bind(me)
            });
        });
        return rendered;
    };

    Pickable.prototype.render = function render() {
        var _classnames;

        var me = this;
        var _me$props2 = me.props;
        var prefixCls = _me$props2.prefixCls;
        var className = _me$props2.className;

        return React.createElement(
            'div',
            { className: classnames((_classnames = {}, _defineProperty(_classnames, '' + prefixCls, true), _defineProperty(_classnames, className, !!className), _classnames)) },
            me.renderChildren()
        );
    };

    return Pickable;
}(React.Component);

Pickable.defaultProps = {
    prefixCls: 'kuma-pickable',
    value: [],
    type: 'normal',
    multiple: true,
    onChange: function onChange() {}
};

// http://facebook.github.io/react/docs/reusable-components.html
Pickable.propTypes = {
    prefixCls: React.PropTypes.string,
    className: React.PropTypes.string,
    value: React.PropTypes.array,
    multiple: React.PropTypes.bool,
    onChange: React.PropTypes.func,
    type: React.PropTypes.oneOf(['normal', 'simple', 'hook']),
    max: React.PropTypes.number
};

Pickable.displayName = 'Pickable';

Pickable.Item = Item;

module.exports = Pickable;