'use strict';

var _CascadeSubmenu = require('./CascadeSubmenu');

var _CascadeSubmenu2 = _interopRequireDefault(_CascadeSubmenu);

var _SuperComponent2 = require('./SuperComponent');

var _SuperComponent3 = _interopRequireDefault(_SuperComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
* CascadeSelect Component for uxcore
* @author changming
*
* Copyright 2015-2016, Uxcore Team, Alinw.
* All rights reserved.
*/

var React = require('react');
var classnames = require('classnames');
var Dropdown = require('uxcore-dropdown');


var cascaderId = 1000;

var CascadeSelect = function (_SuperComponent) {
  _inherits(CascadeSelect, _SuperComponent);

  function CascadeSelect(props) {
    _classCallCheck(this, CascadeSelect);

    var _this = _possibleConstructorReturn(this, _SuperComponent.call(this, props));

    var defaultValue = props.defaultValue;
    var options = props.options;
    var value = props.value;

    var selectedOptions = _this.getSelectedOptions(props);
    _this.state = {
      displayValue: value || defaultValue,
      value: value || defaultValue,
      selectedOptions: selectedOptions
    };
    return _this;
  }

  CascadeSelect.prototype.getSelectedOptions = function getSelectedOptions(props) {
    var selectedOptions = [];
    var options = props.options;
    var value = props.value;
    var defaultValue = props.defaultValue;

    var theValue = value || defaultValue;
    if (theValue.length) {
      (function () {
        var renderArr = null;
        var prevSelected = null;
        theValue.forEach(function (key, index) {
          if (index === 0) {
            renderArr = options;
          } else {
            renderArr = prevSelected.children;
          }
          prevSelected = renderArr.find(function (item) {
            return item.value === key;
          });
          if (renderArr) {
            selectedOptions[index] = prevSelected;
          }
        });
      })();
    }
    return selectedOptions;
  };

  CascadeSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var value = nextProps.value;
    var options = nextProps.options;

    if (value) {
      var selectedOptions = this.getSelectedOptions(nextProps);
      this.setState({
        displayValue: value,
        value: value,
        selectedOptions: selectedOptions
      });
    }
  };

  CascadeSelect.prototype.onSubmenuItemClick = function onSubmenuItemClick(key, index, selectedOption) {
    var _state = this.state;
    var value = _state.value;
    var selectedOptions = _state.selectedOptions;
    var _props = this.props;
    var onChange = _props.onChange;
    var changeOnSelect = _props.changeOnSelect;
    var cascadeSize = _props.cascadeSize;

    var hideSubmenu = false;
    var newValue = value.slice(0, index);
    newValue.push(key);
    var newSelectedOptions = selectedOptions.slice(0, index);
    newSelectedOptions.push(selectedOption);
    if (newSelectedOptions.length >= cascadeSize) {
      hideSubmenu = true;
      this.refs.wrapper.click();
    }
    if (onChange) {
      onChange(newValue, newSelectedOptions);
    }
    if (changeOnSelect) {
      this.setState({
        displayValue: newValue,
        value: newValue,
        selectedOptions: newSelectedOptions
      });
    } else if (hideSubmenu) {
      this.setState({
        displayValue: newValue,
        value: newValue,
        selectedOptions: newSelectedOptions
      });
    } else {
      this.setState({
        value: newValue,
        selectedOptions: newSelectedOptions
      });
    }
  };

  CascadeSelect.prototype.clearContent = function clearContent() {
    var onChange = this.props.onChange;

    this.setState({
      displayValue: [],
      value: [],
      selectedOptions: []
    });
    if (onChange) {
      onChange([], []);
    }
  };

  CascadeSelect.prototype.onDropDownVisibleChange = function onDropDownVisibleChange(visible) {
    var disabled = this.props.disabled;

    if (!disabled) {
      this.setState({ showSubMenu: visible });
    }
  };

  CascadeSelect.prototype.renderContent = function renderContent() {
    var _classnames, _classnames2;

    var _props2 = this.props;
    var placeholder = _props2.placeholder;
    var className = _props2.className;
    var options = _props2.options;
    var disabled = _props2.disabled;
    var clearable = _props2.clearable;
    var expandTrigger = _props2.expandTrigger;
    var cascadeSize = _props2.cascadeSize;
    var prefixCls = _props2.prefixCls;
    var _state2 = this.state;
    var value = _state2.value;
    var selectedOptions = _state2.selectedOptions;
    var showSubMenu = _state2.showSubMenu;
    var displayValue = _state2.displayValue;

    return React.createElement(
      'div',
      {
        id: ++cascaderId,
        ref: 'wrapper',
        className: classnames((_classnames = {}, _defineProperty(_classnames, this.prefixCls('wrapper'), true), _defineProperty(_classnames, className, true), _defineProperty(_classnames, this.prefixCls('disabled'), disabled), _defineProperty(_classnames, this.prefixCls('clearable'), !disabled && clearable && displayValue.length > 0), _classnames))
      },
      React.createElement(
        'div',
        { className: this.prefixCls('text') },
        React.createElement(
          'div',
          { className: this.prefixCls('trigger')
          },
          placeholder && !displayValue.length ? React.createElement(
            'div',
            { className: this.prefixCls('placeholder') },
            placeholder
          ) : null,
          displayValue.length ? this.props.beforeRender(displayValue, selectedOptions) : null
        )
      ),
      React.createElement(
        'div',
        {
          className: classnames((_classnames2 = {}, _defineProperty(_classnames2, this.prefixCls('arrow'), true), _defineProperty(_classnames2, this.prefixCls('arrow-reverse'), showSubMenu), _classnames2))
        },
        React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-down' })
      ),
      React.createElement(
        'div',
        {
          className: this.prefixCls('close-wrap')
        },
        React.createElement('i', { onClick: this.clearContent.bind(this), className: 'kuma-icon kuma-icon-error' })
      )
    );
  };

  CascadeSelect.prototype.render = function render() {
    var _props3 = this.props;
    var options = _props3.options;
    var disabled = _props3.disabled;
    var prefixCls = _props3.prefixCls;
    var expandTrigger = _props3.expandTrigger;
    var cascadeSize = _props3.cascadeSize;
    var value = this.state.value;

    if (disabled) {
      return this.renderContent();
    }
    var submenu = React.createElement('div', null);
    if (options.length && !disabled) {
      submenu = React.createElement(_CascadeSubmenu2["default"], {
        prefixCls: prefixCls,
        onItemClick: this.onSubmenuItemClick.bind(this),
        options: options,
        value: value,
        expandTrigger: expandTrigger,
        cascadeSize: cascadeSize
      });
    }
    return React.createElement(
      Dropdown,
      {
        overlay: submenu,
        trigger: ['click'],
        onVisibleChange: this.onDropDownVisibleChange.bind(this)
      },
      this.renderContent()
    );
  };

  return CascadeSelect;
}(_SuperComponent3["default"]);

CascadeSelect.defaultProps = {
  prefixCls: 'kuma-cascader',
  className: '',
  placeholder: '请选择',
  options: [],
  defaultValue: [],
  value: null,
  onChange: function onChange(value, selectedOptions) {},
  disabled: false,
  clearable: false,
  changeOnSelect: false,
  expandTrigger: 'click',
  cascadeSize: 3,
  beforeRender: function beforeRender(value, selectedOptions) {
    return selectedOptions.map(function (o) {
      return o.label;
    }).join(' / ');
  }
};

// http://facebook.github.io/react/docs/reusable-components.html
CascadeSelect.propTypes = {
  prefixCls: React.PropTypes.string,
  className: React.PropTypes.string,
  options: React.PropTypes.array,
  defaultValue: React.PropTypes.array,
  value: React.PropTypes.array,
  placeholder: React.PropTypes.string,
  onChange: React.PropTypes.func,
  disabled: React.PropTypes.bool,
  clearable: React.PropTypes.bool,
  changeOnSelect: React.PropTypes.bool,
  expandTrigger: React.PropTypes.string,
  beforeRender: React.PropTypes.func
};

CascadeSelect.displayName = 'CascadeSelect';

module.exports = CascadeSelect;