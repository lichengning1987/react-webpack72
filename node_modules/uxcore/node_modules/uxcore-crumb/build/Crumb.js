'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Crumb Component for uxcore
 * @author peijie.dpj
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var CrumbItem = require('uxcore-crumb-item');
var classnames = require('classnames');
var React = require('react');
var ReactDOM = require('react-dom');

var Crumb = function (_React$Component) {
  _inherits(Crumb, _React$Component);

  function Crumb(props) {
    _classCallCheck(this, Crumb);

    return _possibleConstructorReturn(this, _React$Component.call(this, props));
  }

  Crumb.prototype.render = function render() {
    var _classnames;

    var me = this;

    return React.createElement(
      'div',
      { className: classnames((_classnames = {}, _classnames[me.props.prefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)) },
      me.props.children
    );
  };

  return Crumb;
}(React.Component);

Crumb.defaultProps = {
  prefixCls: 'kuma-uxcrumbs'
};

// http://facebook.github.io/react/docs/reusable-components.html
Crumb.propTypes = {
  /**
   * @title 类名前缀
   * @veIgnore
   */
  prefixCls: React.PropTypes.string,
  /**
   * @title CSS类名
   * @veIgnore
   */
  className: React.PropTypes.string
};

Crumb.Item = CrumbItem;

Crumb.displayName = 'Crumb';

module.exports = Crumb;