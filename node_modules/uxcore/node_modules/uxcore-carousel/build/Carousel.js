'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Carousel Component for uxcore
 * @author eternaslky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

// matchMedia polyfill for
// https://github.com/WickyNilliams/enquire.js/issues/82

if (typeof window !== 'undefined') {
    var matchMediaPolyfill = function matchMediaPolyfill() {
        return {
            matches: false,
            addListener: function addListener() {},
            removeListener: function removeListener() {}
        };
    };
    window.matchMedia = window.matchMedia || matchMediaPolyfill;
}

var Slick = require('react-slick');
var assign = require('object-assign');
var classnames = require('classnames');
var React = require('react');
var ReactDOM = require('react-dom');

var Carousel = function (_React$Component) {
    _inherits(Carousel, _React$Component);

    function Carousel(props) {
        _classCallCheck(this, Carousel);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    Carousel.prototype.processChildren = function processChildren() {
        var me = this;
        var length = React.Children.count(me.props.children);
        if (length > 0) {
            return React.Children.map(me.props.children, function (child, index) {
                return React.createElement(
                    'div',
                    null,
                    child
                );
            });
        } else {
            return React.createElement('div', null);
        }
    };

    Carousel.prototype.render = function render() {
        var _classnames;

        var me = this;
        var _me$props = me.props;
        var children = _me$props.children;
        var className = _me$props.className;

        var props = _objectWithoutProperties(_me$props, ['children', 'className']);

        return React.createElement(
            'div',
            { className: classnames((_classnames = {
                    "kuma-carousel": true
                }, _classnames[className] = !!className, _classnames)) },
            React.createElement(
                Slick,
                props,
                me.processChildren()
            )
        );
    };

    return Carousel;
}(React.Component);

Carousel.defaultProps = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1
};

// http://facebook.github.io/react/docs/reusable-components.html
Carousel.propTypes = {};

Carousel.displayName = "Carousel";

module.exports = Carousel;