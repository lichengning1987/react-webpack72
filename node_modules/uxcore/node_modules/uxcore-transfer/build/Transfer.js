'use strict';

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _deepcopy = require('deepcopy');

var _deepcopy2 = _interopRequireDefault(_deepcopy);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Transfer = function (_React$Component) {
    _inherits(Transfer, _React$Component);

    function Transfer(props) {
        _classCallCheck(this, Transfer);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            chosen: props.data.filter(function (item) {
                return !!item.chosen;
            }),
            unChosen: props.data.filter(function (item) {
                return !item.chosen;
            })
        };
        return _this;
    }

    Transfer.prototype.componentDidMount = function componentDidMount() {
        var me = this;
    };

    Transfer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var me = this;
        if (!me._isEqual(nextProps.data, me.props.data)) {
            me.setState({
                chosen: nextProps.data.filter(function (item) {
                    return !!item.chosen;
                }),
                unChosen: nextProps.data.filter(function (item) {
                    return !item.chosen;
                })
            });
        }
    };

    Transfer.prototype._isEqual = function _isEqual(a, b) {
        return JSON.stringify(a) == JSON.stringify(b);
    };

    /**
     * 抽取 arr1 的一部分给 arr2，返回变换后的两个数组
     * @param {array} arr1
     * @param {array} arr2
     */

    Transfer.prototype.selectItems = function selectItems(arr) {
        var me = this;
        var data = (0, _deepcopy2["default"])(this.state);
        data.chosen.forEach(function (item, index) {
            if (arr.indexOf(item.value) != -1) {
                item.selected = true;
            }
        });
        data.unChosen.forEach(function (item, index) {
            if (arr.indexOf(item.value) != -1) {
                item.selected = true;
            }
        });
        me.setState(data);
    };

    /**
     * 重置，取消所有的用户操作
     */

    Transfer.prototype.reset = function reset() {
        var me = this;
        me.setState({
            chosen: me.props.data.filter(function (item) {
                return !!item.chosen;
            }),
            unChosen: me.props.data.filter(function (item) {
                return !item.chosen;
            })
        });
    };

    Transfer.prototype.locateItem = function locateItem(value, position) {
        var me = this;
        if (value === "") {
            return;
        }
        var data = (0, _deepcopy2["default"])(me.state[position]);
        var leftBlock = me.refs.leftBlock;
        var leftBlockEl = _reactDom2["default"].findDOMNode(leftBlock);
        var rightBlock = me.refs.rightBlock;
        var rightBlockEl = _reactDom2["default"].findDOMNode(rightBlock);
        var index = void 0;
        for (var i = 0; i < data.length; i++) {
            data[i].justMoved = false;
        }
        for (var _i = 0; _i < data.length; _i++) {
            if (data[_i].name.indexOf(value) !== -1) {
                index = _i;
                break;
            }
            if (data[_i].keywords instanceof Array) {
                var keywords = data[_i].keywords;
                for (var j = 0; j < keywords.length; j++) {
                    if (keywords[j].indexOf(value) !== -1) {
                        index = _i;
                        break;
                    }
                }
                if (index != undefined) break;
            }
        }
        data[index].justMoved = true;
        if (position == 'unChosen') {
            leftBlockEl.scrollTop = 30 * index;
        } else {
            rightBlock.scrollTop = 30 * index;
        }
        var obj = {};
        obj[position] = data;
        this.setState(obj);
    };

    Transfer.prototype._handleSearchIconClick = function _handleSearchIconClick(position) {
        var me = this;
        var leftSearch = me.refs.leftSearch;
        var rightSearch = me.refs.rightSearch;
        var value = '';
        if (position == "unChosen") {
            value = leftSearch.value;
        } else {
            value = rightSearch.value;
        }
        me.locateItem(value, position);
    };

    Transfer.prototype._handleSearch = function _handleSearch(position, e) {
        var me = this;
        var leftSearch = me.refs.leftSearch;
        var rightSearch = me.refs.rightSearch;
        var value = '';
        if (e.keyCode == 13) {
            if (position == "unChosen") {
                value = leftSearch.value;
            } else {
                value = rightSearch.value;
            }
            me.locateItem(value, position);
        }
    };

    Transfer.prototype._changeChosenData = function _changeChosenData(arr1, arr2) {
        var newArr1 = arr1.filter(function (item) {
            return !item.selected;
        });
        var newArr2 = arr1.filter(function (item) {
            return item.selected;
        }).map(function (item, index) {
            item.chosen = !item.chosen;
            item.selected = false;
            item.justMoved = true;
            return item;
        }).concat(arr2);

        return {
            arr1: newArr1,
            arr2: newArr2
        };
    };

    Transfer.prototype._handleItemClick = function _handleItemClick(e) {
        var me = this;
        if (me.props.disabled) return;
        var target = e.currentTarget;
        me._removeJustMoved(function (target) {
            var key = target.getAttribute('data-key');
            var isChosen = JSON.parse(target.getAttribute('data-chosen'));
            var newData = (0, _deepcopy2["default"])(me.state[isChosen ? 'chosen' : 'unChosen']);
            newData[key].selected = !newData[key].selected;
            var newState = {};
            newState[isChosen ? 'chosen' : 'unChosen'] = newData;
            me.setState(newState);
        }.bind(me, target));
    };

    Transfer.prototype._removeJustMoved = function _removeJustMoved(cb) {
        var me = this;
        var data = (0, _deepcopy2["default"])(this.state);
        data.chosen.forEach(function (item, index) {
            item.justMoved = false;
        });
        data.unChosen.forEach(function (item, index) {
            item.justMoved = false;
        });
        me.setState(data, function () {
            !!cb && cb();
        });
    };

    Transfer.prototype._handleButtonClick = function _handleButtonClick(e) {
        var me = this;
        if (me.props.disabled) return;
        var target = e.currentTarget;
        var direction = target.getAttribute('data-direction');
        if (target.className.indexOf('enable') == -1) return;
        var oldChosen = (0, _deepcopy2["default"])(me.state['chosen']);
        var oldUnChosen = (0, _deepcopy2["default"])(me.state['unChosen']);
        var newChosen = [];
        var newUnChosen = [];
        var newData = {};
        if (direction == 'left') {
            newData = me._changeChosenData(oldChosen, oldUnChosen);
            newChosen = newData.arr1;
            newUnChosen = newData.arr2;
        } else {
            newData = me._changeChosenData(oldUnChosen, oldChosen);
            newUnChosen = newData.arr1;
            newChosen = newData.arr2;
        }

        me.setState({
            chosen: newChosen,
            unChosen: newUnChosen
        }, function () {
            me.props.onChange(me.state);
        });
    };

    Transfer.prototype._handleCheckLeftAll = function _handleCheckLeftAll(e) {
        e.preventDefault();
        var unChosen = this.state.unChosen;

        unChosen.forEach(function (d) {
            d.selected = true;
        });
        this.setState({
            unChosen: unChosen
        });
    };

    Transfer.prototype._handleCheckRightAll = function _handleCheckRightAll(e) {
        e.preventDefault();
        var chosen = this.state.chosen;

        chosen.forEach(function (d) {
            d.selected = true;
        });
        this.setState({
            chosen: chosen
        });
    };

    Transfer.prototype._renderItem = function _renderItem(item, index) {
        var me = this;
        window.me = me;
        return _react2["default"].createElement(
            'li',
            { key: index, 'data-key': index, 'data-value': item.value, 'data-chosen': item.chosen, onClick: me._handleItemClick.bind(me) },
            _react2["default"].createElement(
                'a',
                { className: (0, _classnames2["default"])({
                        "selected": !!item.selected,
                        "justMoved": !!item.justMoved
                    }), href: 'javascript:;', title: item.description },
                item.name
            )
        );
    };

    Transfer.prototype._renderUnchosen = function _renderUnchosen() {
        var me = this;
        var arr = me.state.unChosen.filter(function (item) {
            return !item.chosen;
        }).map(me._renderItem.bind(me));
        return arr;
    };

    Transfer.prototype._renderChosen = function _renderChosen() {
        var me = this;
        var arr = me.state.chosen.filter(function (item) {
            return item.chosen;
        }).map(me._renderItem.bind(me));
        return arr;
    };

    Transfer.prototype._renderSearch = function _renderSearch(position) {
        var me = this;
        if (!me.props.showSearch) return;
        var map = {
            "unChosen": "leftSearch",
            "chosen": "rightSearch"
        };
        return _react2["default"].createElement(
            'div',
            { className: 'searchBar' },
            _react2["default"].createElement('input', { type: 'text', ref: map[position], className: 'kuma-input', placeholder: me.props.searchPlaceholder, onKeyDown: me._handleSearch.bind(me, position) }),
            _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-search', onClick: me._handleSearchIconClick.bind(me, position) })
        );
    };

    Transfer.prototype.render = function render() {
        var me = this;
        var style = void 0;
        if (this.props.height) {
            style = {
                height: this.props.height - 38 - (this.props.showSearch ? 28 : 0)
            };
        }
        return _react2["default"].createElement(
            'div',
            { className: (0, _classnames2["default"])({
                    "uxTransfer": true,
                    "disabled": me.props.disabled
                }) },
            _react2["default"].createElement(
                'table',
                { className: 'kuma-uxtransfer-container' },
                _react2["default"].createElement(
                    'thead',
                    { className: 'kuma-uxtransfer-head' },
                    _react2["default"].createElement(
                        'tr',
                        null,
                        _react2["default"].createElement(
                            'th',
                            { className: 'fn-clear left-head' },
                            _react2["default"].createElement(
                                'span',
                                { className: 'title' },
                                me.props.leftTitle
                            ),
                            _react2["default"].createElement(
                                'a',
                                { href: '#', className: 'check-all', title: me.props.checkAllText, onClick: this._handleCheckLeftAll.bind(this) },
                                me.props.checkAllText
                            )
                        ),
                        _react2["default"].createElement('th', null),
                        _react2["default"].createElement(
                            'th',
                            { className: 'fn-clear right-head' },
                            _react2["default"].createElement(
                                'span',
                                { className: 'title' },
                                me.props.rightTitle
                            ),
                            _react2["default"].createElement(
                                'a',
                                { href: '#', className: 'check-all', title: me.props.checkAllText, onClick: this._handleCheckRightAll.bind(this) },
                                me.props.checkAllText
                            )
                        )
                    )
                ),
                _react2["default"].createElement(
                    'tbody',
                    null,
                    _react2["default"].createElement(
                        'tr',
                        null,
                        _react2["default"].createElement(
                            'td',
                            { className: 'left-block' },
                            me._renderSearch("unChosen"),
                            _react2["default"].createElement(
                                'ul',
                                { ref: 'leftBlock', className: (0, _classnames2["default"])({
                                        "kuma-uxtransfer-block": true
                                    }), style: style },
                                me._renderUnchosen()
                            )
                        ),
                        _react2["default"].createElement(
                            'td',
                            { className: 'kuma-uxtransfer-buttons' },
                            _react2["default"].createElement('a', { href: 'javascript:;', 'data-direction': 'left', className: (0, _classnames2["default"])({
                                    enable: me.state.chosen.some(function (item) {
                                        return !!item.selected;
                                    }) && !me.props.disabled
                                }), onClick: me._handleButtonClick.bind(me) }),
                            _react2["default"].createElement('br', null),
                            _react2["default"].createElement('a', { href: 'javascript:;', 'data-direction': 'right', className: (0, _classnames2["default"])({
                                    enable: me.state.unChosen.some(function (item) {
                                        return !!item.selected;
                                    }) && !me.props.disabled
                                }), onClick: me._handleButtonClick.bind(me) })
                        ),
                        _react2["default"].createElement(
                            'td',
                            { className: 'right-block' },
                            me._renderSearch("chosen"),
                            _react2["default"].createElement(
                                'ul',
                                { ref: 'rightBlock', className: (0, _classnames2["default"])({
                                        "kuma-uxtransfer-block": true
                                    }), style: style },
                                me._renderChosen()
                            )
                        )
                    )
                )
            )
        );
    };

    return Transfer;
}(_react2["default"].Component);

Transfer.displayName = "Transfer";
Transfer.defaultProps = {
    height: 220,
    searchPlaceholder: '定位输入内容',
    data: [],
    leftTitle: '未选中',
    rightTitle: '已选中',
    checkAllText: '全选',
    disabled: false,
    showSearch: true,
    onChange: function onChange() {}
};
Transfer.propTypes = {
    height: _react2["default"].PropTypes.number,
    searchPlaceholder: _react2["default"].PropTypes.string,
    data: _react2["default"].PropTypes.array,
    disabled: _react2["default"].PropTypes.bool,
    showSearch: _react2["default"].PropTypes.bool,
    leftTitle: _react2["default"].PropTypes.string,
    rightTitle: _react2["default"].PropTypes.string,
    checkAllText: _react2["default"].PropTypes.string,
    onChange: _react2["default"].PropTypes.func
};

module.exports = Transfer;